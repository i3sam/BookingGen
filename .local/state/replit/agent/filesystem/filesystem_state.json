{"file_contents":{"README.md":{"content":"# BookingGen - Beautiful Booking Pages Generator\n\nCreate stunning, professional booking pages in minutes. BookingGen is a modern SaaS platform that allows freelancers, consultants, and service providers to build custom booking experiences with integrated payment processing and appointment management.\n\n## ‚ú® Features\n\n- **Custom Booking Pages**: Create beautiful, branded booking pages with your logo, colors, and services\n- **Smart Scheduling**: Intelligent calendar integration with availability management and time zone detection\n- **Secure Payments**: Accept payments instantly with Razorpay integration\n- **Mobile Optimized**: Responsive designs that work perfectly on all devices\n- **Analytics Dashboard**: Track bookings, revenue, and customer insights\n- **Appointment Management**: Accept, decline, and reschedule appointments with ease\n\n## üöÄ Tech Stack\n\n- **Frontend**: React + Vite, Tailwind CSS, Shadcn UI\n- **Backend**: Express.js with serverless API routes\n- **Database**: PostgreSQL with Drizzle ORM\n- **Authentication**: Supabase Auth\n- **Payments**: Razorpay\n- **Storage**: Supabase Storage\n- **Deployment**: Vercel\n\n## üìã Prerequisites\n\n- Node.js 18+ and npm\n- Supabase account and project\n- Razorpay account for payment processing\n\n## üõ†Ô∏è Local Development Setup\n\n### 1. Clone the Repository\n\n```bash\ngit clone <repository-url>\ncd bookinggen\nnpm install\n","size_bytes":1383},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2681},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"// Load environment variables first before any other imports\nimport 'dotenv/config';\n\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2152},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n// Removed PostgreSQL schema imports - using Supabase directly\nimport Razorpay from \"razorpay\";\nimport crypto from \"crypto\";\nimport { createClient } from '@supabase/supabase-js';\nimport multer from 'multer';\n\n// Supabase setup\nconst supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL;\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n\nlet supabase: any = null;\nif (supabaseUrl && supabaseServiceKey) {\n  try {\n    // Validate URL format before creating client\n    new URL(supabaseUrl); // This will throw if URL is invalid\n    supabase = createClient(supabaseUrl, supabaseServiceKey);\n    console.log(\"Supabase client initialized successfully\");\n    console.log(\"Routes Supabase URL:\", supabaseUrl);\n  } catch (error) {\n    console.warn(\"Failed to initialize Supabase client:\", error instanceof Error ? error.message : error);\n    console.warn(\"Application will continue without Supabase authentication\");\n  }\n} else {\n  console.warn(\"Supabase credentials not found. Application will continue without Supabase authentication\");\n}\n\n// Razorpay setup (optional for MVP testing)\nlet razorpay: Razorpay | null = null;\nif (process.env.RAZORPAY_KEY_ID && process.env.RAZORPAY_KEY_SECRET) {\n  razorpay = new Razorpay({\n    key_id: process.env.RAZORPAY_KEY_ID,\n    key_secret: process.env.RAZORPAY_KEY_SECRET,\n  });\n}\n\n// Middleware to verify Supabase JWT\nasync function verifyToken(req: any, res: any, next: any) {\n  const authHeader = req.headers.authorization;\n  \n  if (!supabase) {\n    console.error(\"Supabase not configured\");\n    return res.status(503).json({ message: \"Authentication service unavailable\" });\n  }\n\n  if (!authHeader) {\n    return res.status(401).json({ message: \"No token provided\" });\n  }\n\n  const token = authHeader.split(\" \")[1];\n  try {\n    const { data: { user }, error } = await supabase.auth.getUser(token);\n    if (error || !user) {\n      return res.status(401).json({ message: \"Invalid token\" });\n    }\n    \n    req.user = { userId: user.id, email: user.email };\n    next();\n  } catch (error) {\n    return res.status(401).json({ message: \"Invalid token\" });\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // File upload route using multer for handling file uploads\n  const upload = multer({ \n    storage: multer.memoryStorage(),\n    limits: { fileSize: 5 * 1024 * 1024 }, // 5MB limit\n    fileFilter: (req: any, file: any, cb: any) => {\n      if (file.mimetype.startsWith('image/')) {\n        cb(null, true);\n      } else {\n        cb(new Error('Only image files are allowed'), false);\n      }\n    }\n  });\n\n  app.post(\"/api/storage/upload\", verifyToken, upload.single('file'), async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file provided\" });\n      }\n\n      if (!supabase) {\n        return res.status(503).json({ message: \"Storage service unavailable\" });\n      }\n\n      const bucket = req.body.bucket || 'logos';\n      const folder = req.body.folder || '';\n      \n      // Security: Only allow specific buckets\n      const allowedBuckets = ['logos'];\n      if (!allowedBuckets.includes(bucket)) {\n        return res.status(400).json({ message: \"Invalid bucket name\" });\n      }\n\n      // Generate unique filename\n      const fileExt = req.file.originalname.split('.').pop();\n      const fileName = `${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExt}`;\n      const filePath = folder ? `${folder}/${fileName}` : fileName;\n\n      // Upload using service role (bypasses RLS)\n      const { data, error } = await supabase.storage\n        .from(bucket)\n        .upload(filePath, req.file.buffer, {\n          contentType: req.file.mimetype,\n          cacheControl: '3600',\n          upsert: false\n        });\n\n      if (error) {\n        console.error(\"Upload error:\", error);\n        return res.status(500).json({ message: \"Failed to upload file\" });\n      }\n\n      // Get the public URL\n      const { data: { publicUrl } } = supabase.storage\n        .from(bucket)\n        .getPublicUrl(filePath);\n\n      res.json({\n        success: true,\n        url: publicUrl,\n        path: filePath\n      });\n\n    } catch (error) {\n      console.error(\"File upload error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Storage bucket management route\n  app.post(\"/api/storage/ensure-bucket\", verifyToken, async (req: any, res) => {\n    try {\n      const { bucketName } = req.body;\n      \n      // Security: Only allow specific bucket names\n      const allowedBuckets = ['logos'];\n      if (!bucketName || !allowedBuckets.includes(bucketName)) {\n        return res.status(400).json({ message: \"Invalid bucket name\" });\n      }\n\n      if (!supabase) {\n        return res.status(503).json({ message: \"Storage service unavailable\" });\n      }\n\n      // Check if bucket exists\n      const { data: buckets, error: listError } = await supabase.storage.listBuckets();\n      \n      if (!listError && buckets) {\n        const bucketExists = buckets.some((b: any) => b.name === bucketName);\n        if (bucketExists) {\n          return res.json({ success: true, message: \"Bucket already exists\" });\n        }\n      }\n\n      // Create bucket if it doesn't exist\n      const { data, error } = await supabase.storage.createBucket(bucketName, {\n        public: true,\n        allowedMimeTypes: ['image/*'],\n        fileSizeLimit: 5 * 1024 * 1024 // 5MB in bytes\n      });\n\n      if (error) {\n        // Handle \"bucket already exists\" gracefully\n        if (error.message?.includes('already exists')) {\n          return res.json({ success: true, message: \"Bucket already exists\" });\n        }\n        console.error(\"Failed to create bucket:\", error);\n        return res.status(500).json({ message: \"Failed to create storage bucket\" });\n      }\n\n      console.log(\"Storage bucket created successfully:\", bucketName);\n      res.json({ success: true, message: \"Bucket created successfully\" });\n    } catch (error) {\n      console.error(\"Storage bucket error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Profile routes\n  app.post(\"/api/profile\", verifyToken, async (req: any, res) => {\n    try {\n      const { fullName } = req.body;\n      // Use authenticated user ID, not client-provided userId for security\n      const userId = req.user.userId;\n      \n      // Check if profile already exists\n      const existingProfile = await storage.getProfile(userId);\n      if (existingProfile) {\n        return res.json(existingProfile);\n      }\n\n      // Create new profile\n      const profileData = { id: userId, fullName };\n      const profile = await storage.createProfile(profileData);\n      \n      res.json(profile);\n    } catch (error) {\n      console.error(\"Create profile error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/profile\", verifyToken, async (req: any, res) => {\n    try {\n      // Only allow users to access their own profile - ignore userId query parameter\n      let profile = await storage.getProfile(req.user.userId);\n      \n      // If no profile exists, create a default one automatically\n      if (!profile) {\n        console.log(`Creating default profile for user: ${req.user.userId}`);\n        const profileData = { \n          id: req.user.userId, \n          fullName: req.user.email || '' // Use email as fallback if no name\n        };\n        profile = await storage.createProfile(profileData);\n        console.log(`Profile created successfully for user: ${req.user.userId}`);\n      }\n      \n      res.json(profile);\n    } catch (error) {\n      console.error(\"Get profile error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/profile\", verifyToken, async (req: any, res) => {\n    try {\n      const { fullName, timezone } = req.body;\n      \n      const updates: any = {};\n      if (fullName !== undefined) updates.fullName = fullName;\n      // Add other fields as needed\n      \n      const updatedProfile = await storage.updateProfile(req.user.userId, updates);\n      if (!updatedProfile) {\n        return res.status(404).json({ message: \"Profile not found\" });\n      }\n      \n      res.json(updatedProfile);\n    } catch (error) {\n      console.error(\"Update profile error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Pages routes\n  app.post(\"/api/pages\", verifyToken, async (req: any, res) => {\n    try {\n      // Check if user has Pro membership and it hasn't expired\n      const userProfile = await storage.getProfile(req.user.userId);\n      const now = new Date();\n      const membershipExpired = userProfile?.membershipExpires && new Date(userProfile.membershipExpires) <= now;\n      \n      if (!userProfile || userProfile.membershipStatus !== 'pro' || membershipExpired) {\n        return res.status(403).json({ \n          message: \"Active Pro membership required\", \n          details: membershipExpired ? \"Your Pro membership has expired. Please renew to continue creating pages.\" : \"Upgrade to Pro to create booking pages\"\n        });\n      }\n\n      const pageData = {\n        ...req.body,\n        ownerId: req.user.userId\n      };\n\n      // Check if slug exists\n      const existingPage = await storage.getPageBySlug(pageData.slug);\n      if (existingPage) {\n        return res.status(400).json({ message: \"Slug already exists\" });\n      }\n\n      const page = await storage.createPage(pageData);\n      \n      // Create services if provided\n      if (req.body.services && Array.isArray(req.body.services)) {\n        for (const service of req.body.services) {\n          await storage.createService({\n            ...service,\n            pageId: page.id\n          });\n        }\n      }\n\n      res.json(page);\n    } catch (error) {\n      console.error(\"Create page error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/pages\", verifyToken, async (req: any, res) => {\n    try {\n      const pages = await storage.getPagesByOwner(req.user.userId);\n      res.json(pages);\n    } catch (error) {\n      console.error(\"Get pages error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/pages/:slug\", async (req, res) => {\n    try {\n      const page = await storage.getPageBySlug(req.params.slug);\n      if (!page) {\n        return res.status(404).json({ message: \"Page not found\" });\n      }\n\n      const services = await storage.getServicesByPageId(page.id);\n      res.json({ ...page, services });\n    } catch (error) {\n      console.error(\"Get page error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/pages/:id\", verifyToken, async (req: any, res) => {\n    try {\n      const page = await storage.getPage(req.params.id);\n      if (!page || page.ownerId !== req.user.userId) {\n        return res.status(404).json({ message: \"Page not found\" });\n      }\n\n      const updated = await storage.updatePage(req.params.id, req.body);\n      res.json(updated);\n    } catch (error) {\n      console.error(\"Update page error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/pages/:id\", verifyToken, async (req: any, res) => {\n    try {\n      const page = await storage.getPage(req.params.id);\n      if (!page || page.ownerId !== req.user.userId) {\n        return res.status(404).json({ message: \"Page not found\" });\n      }\n\n      await storage.deletePage(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Delete page error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Appointments routes\n  app.post(\"/api/appointments\", async (req, res) => {\n    try {\n      const appointmentData = req.body;\n      const appointment = await storage.createAppointment(appointmentData);\n      res.json(appointment);\n    } catch (error) {\n      console.error(\"Create appointment error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/appointments\", verifyToken, async (req: any, res) => {\n    try {\n      const appointments = await storage.getAppointmentsByOwner(req.user.userId);\n      res.json(appointments);\n    } catch (error) {\n      console.error(\"Get appointments error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/appointments/:id\", verifyToken, async (req: any, res) => {\n    try {\n      // First get the appointment to verify ownership\n      const appointment = await storage.getAppointmentById(req.params.id);\n      if (!appointment) {\n        return res.status(404).json({ message: \"Appointment not found\" });\n      }\n      \n      // Verify the user owns this appointment\n      if (appointment.ownerId !== req.user.userId) {\n        return res.status(403).json({ message: \"Unauthorized to update this appointment\" });\n      }\n      \n      const updated = await storage.updateAppointment(req.params.id, req.body);\n      res.json(updated);\n    } catch (error) {\n      console.error(\"Update appointment error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Payment routes\n  app.post(\"/api/payments/create-order\", verifyToken, async (req: any, res) => {\n    try {\n      if (!razorpay) {\n        return res.status(500).json({ message: \"Payment processing not configured\" });\n      }\n      \n      const { plan } = req.body;\n      \n      // Server-side canonical pricing - ignore any client-provided amount\n      const PLAN_PRICING = {\n        'pro': { amount: 10, currency: 'USD' }\n      };\n      \n      const planConfig = PLAN_PRICING[plan as keyof typeof PLAN_PRICING];\n      if (!planConfig) {\n        return res.status(400).json({ message: \"Invalid plan selected\" });\n      }\n      \n      // Use canonical price from server, never trust client\n      const canonicalAmount = planConfig.amount;\n      const currency = planConfig.currency;\n      \n      const order = await razorpay.orders.create({\n        amount: Math.round(canonicalAmount * 100), // amount in paise\n        currency: currency,\n        receipt: `receipt_${Date.now()}`,\n      });\n\n      await storage.createPayment({\n        userId: req.user.userId,\n        plan,\n        amount: canonicalAmount, // Store canonical amount\n        status: \"created\",\n        razorpayOrderId: order.id,\n        meta: { order }\n      });\n\n      res.json({ \n        orderId: order.id, \n        amount: order.amount, \n        currency: order.currency \n      });\n    } catch (error) {\n      console.error(\"Create order error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/payments/verify\", verifyToken, async (req: any, res) => {\n    try {\n      const { razorpay_payment_id, razorpay_order_id, razorpay_signature } = req.body;\n      \n      // Verify signature\n      const body = razorpay_order_id + \"|\" + razorpay_payment_id;\n      const expectedSignature = crypto\n        .createHmac(\"sha256\", process.env.RAZORPAY_KEY_SECRET!)\n        .update(body.toString())\n        .digest(\"hex\");\n\n      if (expectedSignature !== razorpay_signature) {\n        return res.status(400).json({ message: \"Invalid signature\" });\n      }\n\n      // Update payment status\n      await storage.createPayment({\n        userId: req.user.userId,\n        plan: \"pro\",\n        amount: \"10\",\n        status: \"completed\",\n        razorpayOrderId: razorpay_order_id,\n        razorpayPaymentId: razorpay_payment_id,\n        meta: { razorpay_signature }\n      });\n\n      // Update profile membership\n      await storage.updateProfile(req.user.userId, {\n        membershipStatus: \"pro\",\n        membershipPlan: \"pro\",\n        membershipExpires: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 days\n      });\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Verify payment error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":16357},"server/storage.ts":{"content":"// Load environment variables first\nimport 'dotenv/config';\n\nimport { drizzle } from 'drizzle-orm/neon-http';\nimport { neon } from '@neondatabase/serverless';\nimport { eq, desc } from 'drizzle-orm';\nimport { profiles, pages, services, appointments, paymentsDemo } from '@shared/schema';\n\n// Lazy initialize database connection\nlet db: ReturnType<typeof drizzle> | null = null;\n\nfunction getDb() {\n  if (!db) {\n    if (!process.env.DATABASE_URL) {\n      throw new Error(\"DATABASE_URL environment variable is required\");\n    }\n    \n    console.log(\"Server storage initialized with Drizzle ORM successfully\");\n    const sql = neon(process.env.DATABASE_URL);\n    db = drizzle(sql);\n    \n    // Test database connection\n    testConnection();\n  }\n  return db;\n}\n\n// Test database connection\nasync function testConnection() {\n  try {\n    // Simple query to test connection\n    const result = await getDb().select().from(profiles).limit(1);\n    console.log(\"‚úÖ Database connection successful\");\n  } catch (error) {\n    console.log(\"‚ö†Ô∏è  Database connection test error (may be normal on startup):\", error);\n  }\n}\n\n\nexport interface IStorage {\n  // Profiles\n  createProfile(profile: any): Promise<any>;\n  getProfile(userId: string): Promise<any | undefined>;\n  updateProfile(userId: string, updates: any): Promise<any | undefined>;\n  \n  // Pages\n  createPage(page: any): Promise<any>;\n  getPage(id: string): Promise<any | undefined>;\n  getPageBySlug(slug: string): Promise<any | undefined>;\n  getPagesByOwner(ownerId: string): Promise<any[]>;\n  updatePage(id: string, updates: any): Promise<any | undefined>;\n  deletePage(id: string): Promise<boolean>;\n  \n  // Services\n  createService(service: any): Promise<any>;\n  getServicesByPageId(pageId: string): Promise<any[]>;\n  updateService(id: string, updates: any): Promise<any | undefined>;\n  deleteService(id: string): Promise<boolean>;\n  \n  // Appointments\n  createAppointment(appointment: any): Promise<any>;\n  getAppointmentById(id: string): Promise<any | undefined>;\n  getAppointmentsByOwner(ownerId: string): Promise<any[]>;\n  updateAppointment(id: string, updates: any): Promise<any | undefined>;\n  \n  // Payments\n  createPayment(payment: any): Promise<any>;\n  getPaymentsByUser(userId: string): Promise<any[]>;\n}\n\nexport class DrizzleStorage implements IStorage {\n  async createProfile(profile: any): Promise<any> {\n    try {\n      const [result] = await getDb().insert(profiles).values(profile).returning();\n      return result;\n    } catch (error) {\n      console.error(\"Create profile error:\", error);\n      throw error;\n    }\n  }\n\n  async getProfile(userId: string): Promise<any | undefined> {\n    try {\n      const [result] = await getDb().select().from(profiles).where(eq(profiles.id, userId));\n      return result;\n    } catch (error) {\n      console.error(\"Get profile error:\", error);\n      return undefined;\n    }\n  }\n\n  async updateProfile(userId: string, updates: any): Promise<any | undefined> {\n    try {\n      const [result] = await getDb().update(profiles).set(updates).where(eq(profiles.id, userId)).returning();\n      return result;\n    } catch (error) {\n      console.error(\"Update profile error:\", error);\n      throw error;\n    }\n  }\n\n  async createPage(page: any): Promise<any> {\n    try {\n      const pageData = { ...page, createdAt: new Date(), updatedAt: new Date() };\n      const [result] = await getDb().insert(pages).values(pageData).returning();\n      return result;\n    } catch (error) {\n      console.error(\"Create page error:\", error);\n      throw error;\n    }\n  }\n\n  async getPage(id: string): Promise<any | undefined> {\n    try {\n      const [result] = await getDb().select().from(pages).where(eq(pages.id, id));\n      return result;\n    } catch (error) {\n      console.error(\"Get page error:\", error);\n      return undefined;\n    }\n  }\n\n  async getPageBySlug(slug: string): Promise<any | undefined> {\n    try {\n      const [result] = await getDb().select().from(pages).where(eq(pages.slug, slug));\n      return result;\n    } catch (error) {\n      console.error(\"Get page by slug error:\", error);\n      return undefined;\n    }\n  }\n\n  async getPagesByOwner(ownerId: string): Promise<any[]> {\n    try {\n      const results = await getDb().select().from(pages).where(eq(pages.ownerId, ownerId)).orderBy(desc(pages.createdAt));\n      return results;\n    } catch (error) {\n      console.error(\"Get pages error:\", error);\n      throw error;\n    }\n  }\n\n  async updatePage(id: string, updates: any): Promise<any | undefined> {\n    try {\n      const updateData = { ...updates, updatedAt: new Date() };\n      const [result] = await getDb().update(pages).set(updateData).where(eq(pages.id, id)).returning();\n      return result;\n    } catch (error) {\n      console.error(\"Update page error:\", error);\n      throw error;\n    }\n  }\n\n  async deletePage(id: string): Promise<boolean> {\n    try {\n      await getDb().delete(pages).where(eq(pages.id, id));\n      return true;\n    } catch (error) {\n      console.error(\"Delete page error:\", error);\n      return false;\n    }\n  }\n\n  async createService(service: any): Promise<any> {\n    try {\n      const [result] = await getDb().insert(services).values(service).returning();\n      return result;\n    } catch (error) {\n      console.error(\"Create service error:\", error);\n      throw error;\n    }\n  }\n\n  async getServicesByPageId(pageId: string): Promise<any[]> {\n    try {\n      const results = await getDb().select().from(services).where(eq(services.pageId, pageId));\n      return results;\n    } catch (error) {\n      console.error(\"Get services by page ID error:\", error);\n      throw error;\n    }\n  }\n\n  async updateService(id: string, updates: any): Promise<any | undefined> {\n    try {\n      const [result] = await getDb().update(services).set(updates).where(eq(services.id, id)).returning();\n      return result;\n    } catch (error) {\n      console.error(\"Update service error:\", error);\n      throw error;\n    }\n  }\n\n  async deleteService(id: string): Promise<boolean> {\n    try {\n      await getDb().delete(services).where(eq(services.id, id));\n      return true;\n    } catch (error) {\n      console.error(\"Delete service error:\", error);\n      return false;\n    }\n  }\n\n  async createAppointment(appointment: any): Promise<any> {\n    try {\n      const [result] = await getDb().insert(appointments).values(appointment).returning();\n      return result;\n    } catch (error) {\n      console.error(\"Create appointment error:\", error);\n      throw error;\n    }\n  }\n\n  async getAppointmentById(id: string): Promise<any | undefined> {\n    try {\n      const [result] = await getDb().select().from(appointments).where(eq(appointments.id, id));\n      return result;\n    } catch (error) {\n      console.error(\"Get appointment by ID error:\", error);\n      return undefined;\n    }\n  }\n\n  async getAppointmentsByOwner(ownerId: string): Promise<any[]> {\n    try {\n      const results = await getDb().select().from(appointments).where(eq(appointments.ownerId, ownerId)).orderBy(desc(appointments.createdAt));\n      return results;\n    } catch (error) {\n      console.error(\"Get appointments by owner error:\", error);\n      throw error;\n    }\n  }\n\n  async updateAppointment(id: string, updates: any): Promise<any | undefined> {\n    try {\n      const updateData = { ...updates, updatedAt: new Date() };\n      const [result] = await getDb().update(appointments).set(updateData).where(eq(appointments.id, id)).returning();\n      return result;\n    } catch (error) {\n      console.error(\"Update appointment error:\", error);\n      throw error;\n    }\n  }\n\n  async createPayment(payment: any): Promise<any> {\n    try {\n      const [result] = await getDb().insert(paymentsDemo).values(payment).returning();\n      return result;\n    } catch (error) {\n      console.error(\"Create payment error:\", error);\n      throw error;\n    }\n  }\n\n  async getPaymentsByUser(userId: string): Promise<any[]> {\n    try {\n      const results = await getDb().select().from(paymentsDemo).where(eq(paymentsDemo.userId, userId)).orderBy(desc(paymentsDemo.createdAt));\n      return results;\n    } catch (error) {\n      console.error(\"Get payments by user error:\", error);\n      throw error;\n    }\n  }\n}\n\nexport const storage = new DrizzleStorage();","size_bytes":8223},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, uuid, timestamp, jsonb, numeric, integer, date } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const profiles = pgTable(\"profiles\", {\n  id: uuid(\"id\").primaryKey(), // This will be the Supabase auth.users.id\n  fullName: text(\"full_name\"),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n  membershipStatus: text(\"membership_status\").default(\"free\"), // free | pro\n  membershipPlan: text(\"membership_plan\"),\n  membershipExpires: timestamp(\"membership_expires\"),\n});\n\nexport const pages = pgTable(\"pages\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ownerId: uuid(\"owner_id\").references(() => profiles.id),\n  title: text(\"title\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n  tagline: text(\"tagline\"),\n  logoUrl: text(\"logo_url\"),\n  primaryColor: text(\"primary_color\").default(\"#2563eb\"),\n  theme: text(\"theme\").default(\"Ocean Blue\"),\n  backgroundType: text(\"background_type\").default(\"gradient\"),\n  backgroundValue: text(\"background_value\").default(\"blue\"),\n  fontFamily: text(\"font_family\").default(\"inter\"),\n  calendarLink: text(\"calendar_link\"),\n  data: jsonb(\"data\"),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").default(sql`now()`),\n});\n\nexport const services = pgTable(\"services\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  pageId: uuid(\"page_id\").references(() => pages.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  durationMinutes: integer(\"duration_minutes\").notNull(),\n  price: numeric(\"price\").notNull(),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const appointments = pgTable(\"appointments\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  pageId: uuid(\"page_id\").references(() => pages.id, { onDelete: \"cascade\" }),\n  ownerId: uuid(\"owner_id\").references(() => profiles.id),\n  serviceId: uuid(\"service_id\").references(() => services.id),\n  customerName: text(\"customer_name\").notNull(),\n  customerEmail: text(\"customer_email\"),\n  customerPhone: text(\"customer_phone\").notNull(),\n  date: date(\"date\").notNull(),\n  time: text(\"time\").notNull(),\n  status: text(\"status\").default(\"pending\"), // pending|accepted|declined|rescheduled\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").default(sql`now()`),\n});\n\nexport const paymentsDemo = pgTable(\"payments_demo\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => profiles.id),\n  plan: text(\"plan\"),\n  amount: numeric(\"amount\"),\n  status: text(\"status\"),\n  razorpayOrderId: text(\"razorpay_order_id\"),\n  razorpayPaymentId: text(\"razorpay_payment_id\"),\n  meta: jsonb(\"meta\"),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\n// Insert schemas (users are managed by Supabase auth)\n\nexport const insertProfileSchema = createInsertSchema(profiles).omit({\n  createdAt: true,\n});\n\nexport const insertPageSchema = createInsertSchema(pages).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertServiceSchema = createInsertSchema(services).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAppointmentSchema = createInsertSchema(appointments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPaymentSchema = createInsertSchema(paymentsDemo).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types (User type managed by Supabase auth)\nexport type Profile = typeof profiles.$inferSelect;\nexport type InsertProfile = z.infer<typeof insertProfileSchema>;\nexport type Page = typeof pages.$inferSelect;\nexport type InsertPage = z.infer<typeof insertPageSchema>;\nexport type Service = typeof services.$inferSelect;\nexport type InsertService = z.infer<typeof insertServiceSchema>;\nexport type Appointment = typeof appointments.$inferSelect;\nexport type InsertAppointment = z.infer<typeof insertAppointmentSchema>;\nexport type Payment = typeof paymentsDemo.$inferSelect;\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\n","size_bytes":4230},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport Home from \"@/pages/home\";\nimport Login from \"@/pages/login\";\nimport Signup from \"@/pages/signup\";\nimport Dashboard from \"@/pages/dashboard\";\nimport CreatePage from \"@/pages/create-page\";\nimport PublicBooking from \"@/pages/public-booking\";\nimport Pricing from \"@/pages/pricing\";\nimport Tutorial from \"@/pages/tutorial\";\nimport AuthGuard from \"@/components/auth/auth-guard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/signup\" component={Signup} />\n      <Route path=\"/pricing\" component={Pricing} />\n      <Route path=\"/tutorial\" component={Tutorial} />\n      <Route path=\"/dashboard\">\n        <AuthGuard>\n          <Dashboard />\n        </AuthGuard>\n      </Route>\n      <Route path=\"/create-page\">\n        <AuthGuard>\n          <CreatePage />\n        </AuthGuard>\n      </Route>\n      <Route path=\"/:slug\" component={PublicBooking} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1633},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600;700&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n  --chart-1: hsl(221.2, 83.2%, 53.3%);\n  --chart-2: hsl(159.8, 100%, 36.1%);\n  --chart-3: hsl(42.0, 92.8%, 56.3%);\n  --chart-4: hsl(147.1, 78.5%, 41.96%);\n  --chart-5: hsl(341.5, 75.2%, 50.98%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-primary: hsl(221.2, 83.2%, 53.3%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-border: hsl(214.3, 31.8%, 91.4%);\n  --sidebar-ring: hsl(221.2, 83.2%, 53.3%);\n  --radius: 0.75rem;\n  --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n}\n\n/* Beautiful background patterns */\n.bg-grid-pattern {\n  background-image: radial-gradient(circle at 1px 1px, rgba(255,255,255,0.15) 1px, transparent 0);\n  background-size: 20px 20px;\n}\n\n.bg-dots-pattern {\n  background-image: radial-gradient(circle at 2px 2px, rgba(255,255,255,0.1) 2px, transparent 0);\n  background-size: 24px 24px;\n}\n\n/* Enhanced card animations */\n.card-hover {\n  transition: all 0.3s ease;\n}\n\n.card-hover:hover {\n  transform: translateY(-8px);\n  box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);\n}\n\n/* Beautiful gradient overlays */\n.hero-overlay {\n  background: linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.05) 100%);\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255,255,255,0.1);\n}\n\n/* Font family classes */\n.font-inter { font-family: 'Inter', sans-serif; }\n.font-playfair { font-family: 'Playfair Display', serif; }\n.font-roboto { font-family: 'Roboto', sans-serif; }\n.font-opensans { font-family: 'Open Sans', sans-serif;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217.2, 91.2%, 59.8%);\n  --primary-foreground: hsl(222.2, 84%, 4.9%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(224.3, 76.3%, 94.1%);\n  --chart-1: hsl(221.2, 83.2%, 53.3%);\n  --chart-2: hsl(159.8, 100%, 36.1%);\n  --chart-3: hsl(42.0, 92.8%, 56.3%);\n  --chart-4: hsl(147.1, 78.5%, 41.96%);\n  --chart-5: hsl(341.5, 75.2%, 50.98%);\n  --sidebar: hsl(222.2, 84%, 4.9%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(221.2, 83.2%, 53.3%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-ring: hsl(221.2, 83.2%, 53.3%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n  }\n}\n\n/* Custom gradient and effects matching the design reference */\n.hero-gradient {\n  background: linear-gradient(135deg, hsl(var(--primary) / 0.1) 0%, hsl(217.2, 91.2%, 70% / 0.1) 100%);\n}\n\n.button-gradient {\n  background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(217.2, 91.2%, 60%) 100%) !important;\n  color: white !important;\n  border: none !important;\n  box-shadow: 0 4px 14px hsl(var(--primary) / 0.3);\n  transition: all 0.3s ease;\n}\n\n.button-gradient:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px hsl(var(--primary) / 0.4) !important;\n  background: linear-gradient(135deg, hsl(var(--primary) / 0.9) 0%, hsl(217.2, 91.2%, 55%) 100%) !important;\n  color: white !important;\n}\n\n.card-hover {\n  transition: all 0.3s ease;\n}\n\n.card-hover:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 20px 40px hsl(var(--primary) / 0.1);\n}\n\n.feature-icon {\n  background: linear-gradient(135deg, hsl(var(--primary) / 0.1) 0%, hsl(217.2, 91.2%, 70% / 0.1) 100%);\n}\n\n.modal-backdrop {\n  backdrop-filter: blur(8px);\n}\n\n/* Ensure rounded corners are consistent */\n.rounded-xl {\n  border-radius: 0.75rem;\n}\n\n/* Premium styling enhancements */\n.premium-gradient {\n  background: linear-gradient(135deg, hsl(var(--primary) / 0.08) 0%, hsl(217.2, 91.2%, 90% / 0.08) 50%, hsl(var(--primary) / 0.12) 100%);\n  backdrop-filter: blur(1px);\n}\n\n.premium-card {\n  background: linear-gradient(145deg, hsl(var(--card)), hsl(var(--card) / 0.98));\n  border: 1px solid hsl(var(--border));\n  box-shadow: 0 4px 20px hsl(var(--foreground) / 0.03), 0 1px 3px hsl(var(--foreground) / 0.08);\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.premium-card:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 12px 40px hsl(var(--foreground) / 0.08), 0 4px 16px hsl(var(--primary) / 0.12);\n}\n\n.stat-card {\n  background: linear-gradient(145deg, hsl(var(--card)), hsl(var(--card) / 0.95));\n  border: 1px solid hsl(var(--border) / 0.5);\n  box-shadow: 0 2px 12px hsl(var(--foreground) / 0.04);\n  transition: all 0.2s ease;\n}\n\n.stat-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 24px hsl(var(--foreground) / 0.08);\n}\n\n.premium-button {\n  background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(217.2, 91.2%, 60%) 100%);\n  box-shadow: 0 4px 16px hsl(var(--primary) / 0.4);\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  border: none;\n  color: white;\n}\n\n.premium-button:hover {\n  transform: translateY(-3px);\n  box-shadow: 0 12px 32px hsl(var(--primary) / 0.5);\n  background: linear-gradient(135deg, hsl(var(--primary) / 0.9) 0%, hsl(217.2, 91.2%, 55%) 100%);\n  color: white;\n}\n\n.glass-effect {\n  background: linear-gradient(145deg, hsl(var(--background) / 0.8), hsl(var(--background) / 0.6));\n  backdrop-filter: blur(12px);\n  border: 1px solid hsl(var(--border) / 0.3);\n}\n\n.text-gradient {\n  background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(217.2, 91.2%, 65%) 100%);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n.dashboard-header {\n  background: linear-gradient(145deg, hsl(var(--card)), hsl(var(--card) / 0.98));\n  border-bottom: 1px solid hsl(var(--border) / 0.8);\n  box-shadow: 0 1px 3px hsl(var(--foreground) / 0.05);\n}\n\n.quick-action-button {\n  background: linear-gradient(145deg, hsl(var(--background)), hsl(var(--muted) / 0.3));\n  border: 1px solid hsl(var(--border) / 0.5);\n  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.quick-action-button:hover {\n  background: linear-gradient(145deg, hsl(var(--muted) / 0.5), hsl(var(--muted) / 0.7));\n  border-color: hsl(var(--primary) / 0.3);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px hsl(var(--foreground) / 0.06);\n}\n\n.rounded-2xl {\n  border-radius: 1rem;\n}\n\n/* Focus styles for accessibility */\n.focus\\:ring-2:focus {\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);\n}\n\n.focus\\:ring-primary:focus {\n  --tw-ring-color: hsl(var(--primary));\n}\n\n/* Animations */\n@keyframes accordion-down {\n  from {\n    height: 0;\n  }\n  to {\n    height: var(--radix-accordion-content-height);\n  }\n}\n\n@keyframes accordion-up {\n  from {\n    height: var(--radix-accordion-content-height);\n  }\n  to {\n    height: 0;\n  }\n}\n\n.animate-accordion-down {\n  animation: accordion-down 0.2s ease-out;\n}\n\n.animate-accordion-up {\n  animation: accordion-up 0.2s ease-out;\n}\n","size_bytes":8948},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const headers: Record<string, string> = {};\n  \n  if (data) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n  \n  // Include JWT token if available\n  const token = localStorage.getItem('token');\n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const headers: Record<string, string> = {};\n    \n    // Include JWT token if available\n    const token = localStorage.getItem('token');\n    if (token) {\n      headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1835},"client/src/lib/razorpay.ts":{"content":"declare global {\n  interface Window {\n    Razorpay: any;\n  }\n}\n\nexport interface RazorpayOptions {\n  key: string;\n  amount: number;\n  currency: string;\n  name: string;\n  description: string;\n  order_id: string;\n  handler: (response: any) => void;\n  prefill: {\n    name: string;\n    email: string;\n  };\n  theme: {\n    color: string;\n  };\n}\n\nexport const initializeRazorpay = (): Promise<boolean> => {\n  return new Promise((resolve) => {\n    const script = document.createElement('script');\n    script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n    script.onload = () => resolve(true);\n    script.onerror = () => resolve(false);\n    document.body.appendChild(script);\n  });\n};\n\nexport const openRazorpayCheckout = (options: RazorpayOptions) => {\n  const rzp = new window.Razorpay(options);\n  rzp.open();\n};\n","size_bytes":816},"client/src/lib/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js';\n\nconst SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;\nconst SUPABASE_ANON_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;\n\nif (!SUPABASE_URL || !SUPABASE_ANON_KEY) {\n  throw new Error('Missing Supabase environment variables');\n}\n\n// Create Supabase client for authentication and storage\nexport const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true\n  }\n});\n\n// File upload utility\nexport const uploadFile = async (file: File, bucket: string = 'logos', folder: string = '') => {\n  try {\n    // First ensure bucket exists on server-side\n    const bucketResponse = await fetch('/api/storage/ensure-bucket', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      },\n      body: JSON.stringify({ bucketName: bucket })\n    });\n\n    if (!bucketResponse.ok) {\n      const errorData = await bucketResponse.json();\n      throw new Error(errorData.message || 'Failed to ensure bucket exists');\n    }\n\n    // Upload file using server-side endpoint (bypasses RLS issues)\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('bucket', bucket);\n    formData.append('folder', folder);\n\n    const uploadResponse = await fetch('/api/storage/upload', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      },\n      body: formData\n    });\n\n    if (!uploadResponse.ok) {\n      const errorData = await uploadResponse.json();\n      throw new Error(errorData.message || 'Upload failed');\n    }\n\n    const result = await uploadResponse.json();\n    return result;\n\n  } catch (error) {\n    console.error('Error uploading file:', error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Upload failed'\n    };\n  }\n};\n","size_bytes":1988},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/create-page.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { uploadFile } from '@/lib/supabase';\nimport { ArrowLeft, CloudUpload, Plus, X, Palette, Image } from 'lucide-react';\n\nexport default function CreatePage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [formData, setFormData] = useState({\n    title: '',\n    slug: '',\n    tagline: '',\n    primaryColor: '#2563eb',\n    calendarLink: '',\n    logoUrl: '',\n    theme: 'Ocean Blue',\n    backgroundType: 'gradient',\n    backgroundValue: 'blue',\n    fontFamily: 'inter',\n    services: [{ name: '', description: '', durationMinutes: 60, price: '0' }]\n  });\n\n  const [logoFile, setLogoFile] = useState<File | null>(null);\n  const [logoPreview, setLogoPreview] = useState<string>('');\n  const [uploadingLogo, setUploadingLogo] = useState(false);\n\n  // Beautiful color themes for booking pages\n  const colorThemes = [\n    { name: 'Ocean Blue', primary: '#2563eb', secondary: '#1e40af', accent: '#3b82f6', gradient: 'from-blue-500 to-blue-600' },\n    { name: 'Forest Green', primary: '#059669', secondary: '#047857', accent: '#10b981', gradient: 'from-emerald-500 to-emerald-600' },\n    { name: 'Sunset Orange', primary: '#ea580c', secondary: '#c2410c', accent: '#fb923c', gradient: 'from-orange-500 to-red-500' },\n    { name: 'Royal Purple', primary: '#7c3aed', secondary: '#6d28d9', accent: '#8b5cf6', gradient: 'from-violet-500 to-purple-600' },\n    { name: 'Rose Gold', primary: '#e11d48', secondary: '#be185d', accent: '#f43f5e', gradient: 'from-rose-500 to-pink-500' },\n    { name: 'Midnight', primary: '#1f2937', secondary: '#111827', accent: '#374151', gradient: 'from-gray-800 to-gray-900' }\n  ];\n\n  const backgroundOptions = [\n    { type: 'gradient', name: 'Blue Gradient', value: 'blue', class: 'bg-gradient-to-br from-blue-100 to-blue-200' },\n    { type: 'gradient', name: 'Green Gradient', value: 'green', class: 'bg-gradient-to-br from-emerald-100 to-emerald-200' },\n    { type: 'gradient', name: 'Purple Gradient', value: 'purple', class: 'bg-gradient-to-br from-violet-100 to-violet-200' },\n    { type: 'gradient', name: 'Rose Gradient', value: 'rose', class: 'bg-gradient-to-br from-rose-100 to-rose-200' },\n    { type: 'solid', name: 'Clean White', value: 'white', class: 'bg-white' },\n    { type: 'solid', name: 'Soft Gray', value: 'gray', class: 'bg-gray-50' }\n  ];\n\n  const fontOptions = [\n    { name: 'Inter (Modern)', value: 'inter', class: 'font-inter' },\n    { name: 'Playfair (Elegant)', value: 'playfair', class: 'font-playfair' },\n    { name: 'Roboto (Clean)', value: 'roboto', class: 'font-roboto' },\n    { name: 'Open Sans (Friendly)', value: 'opensans', class: 'font-opensans' }\n  ];\n\n  const createPageMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest('POST', '/api/pages', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/pages'] });\n      toast({\n        title: \"Page created!\",\n        description: \"Your booking page has been created successfully.\",\n      });\n      setLocation('/dashboard');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error creating page\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const generateSlug = (title: string) => {\n    return title\n      .toLowerCase()\n      .trim()\n      .replace(/[^a-z0-9\\s-]/g, '')\n      .replace(/\\s+/g, '-')\n      .slice(0, 50);\n  };\n\n  const handleTitleChange = (value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      title: value,\n      slug: prev.slug === '' ? generateSlug(value) : prev.slug\n    }));\n  };\n\n  const addService = () => {\n    setFormData(prev => ({\n      ...prev,\n      services: [...prev.services, { name: '', description: '', durationMinutes: 60, price: '0' }]\n    }));\n  };\n\n  const removeService = (index: number) => {\n    if (formData.services.length > 1) {\n      setFormData(prev => ({\n        ...prev,\n        services: prev.services.filter((_, i) => i !== index)\n      }));\n    }\n  };\n\n  const updateService = (index: number, field: string, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      services: prev.services.map((service, i) =>\n        i === index ? { ...service, [field]: value } : service\n      )\n    }));\n  };\n\n  const handleLogoUpload = async (file: File) => {\n    setUploadingLogo(true);\n    try {\n      // Create preview\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setLogoPreview(e.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n\n      // Upload to Supabase\n      const result = await uploadFile(file, 'logos');\n      \n      if (result.success && result.url) {\n        setFormData(prev => ({ ...prev, logoUrl: result.url || '' }));\n        setLogoFile(file);\n        toast({\n          title: \"Logo uploaded!\",\n          description: \"Your logo has been uploaded successfully.\",\n        });\n      } else {\n        toast({\n          title: \"Upload failed\",\n          description: result.error || \"Failed to upload logo. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Upload error\",\n        description: \"Something went wrong while uploading your logo.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploadingLogo(false);\n    }\n  };\n\n  const selectColorTheme = (theme: any) => {\n    setFormData(prev => ({\n      ...prev,\n      primaryColor: theme.primary,\n      theme: theme.name\n    }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.title || !formData.slug) {\n      toast({\n        title: \"Missing fields\",\n        description: \"Please fill in the title and slug.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const servicesWithNumbers = formData.services.map(service => ({\n      ...service,\n      price: parseFloat(service.price) || 0,\n      durationMinutes: parseInt(service.durationMinutes.toString()) || 60\n    }));\n\n    createPageMutation.mutate({\n      ...formData,\n      services: servicesWithNumbers\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-6 py-8\">\n        <div className=\"mb-8\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => setLocation('/dashboard')}\n            className=\"mb-4\"\n            data-testid=\"button-back-to-dashboard\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Dashboard\n          </Button>\n          <h1 className=\"text-3xl font-bold text-foreground\">Create Booking Page</h1>\n          <p className=\"text-muted-foreground\">Set up a new booking page for your services</p>\n        </div>\n\n        <Card className=\"max-w-4xl mx-auto\">\n          <CardContent className=\"p-8\">\n            <form onSubmit={handleSubmit} className=\"space-y-8\">\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div>\n                  <Label htmlFor=\"title\">Page Title</Label>\n                  <Input\n                    id=\"title\"\n                    placeholder=\"e.g., Personal Training\"\n                    value={formData.title}\n                    onChange={(e) => handleTitleChange(e.target.value)}\n                    required\n                    data-testid=\"input-page-title\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"slug\">URL Slug</Label>\n                  <div className=\"flex\">\n                    <span className=\"inline-flex items-center px-3 rounded-l-xl border border-r-0 border-border bg-muted text-muted-foreground text-sm\">\n                      bookinggen.com/\n                    </span>\n                    <Input\n                      id=\"slug\"\n                      placeholder=\"personal-training\"\n                      value={formData.slug}\n                      onChange={(e) => setFormData(prev => ({ ...prev, slug: generateSlug(e.target.value) }))}\n                      className=\"rounded-l-none\"\n                      required\n                      data-testid=\"input-page-slug\"\n                    />\n                  </div>\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"tagline\">Tagline</Label>\n                <Input\n                  id=\"tagline\"\n                  placeholder=\"Transform your fitness journey with personalized training\"\n                  value={formData.tagline}\n                  onChange={(e) => setFormData(prev => ({ ...prev, tagline: e.target.value }))}\n                  data-testid=\"input-tagline\"\n                />\n              </div>\n              \n              <div>\n                <Label>Logo Upload</Label>\n                <div \n                  className=\"border-2 border-dashed border-border rounded-xl p-6 text-center cursor-pointer hover:border-primary/50 transition-colors\"\n                  onClick={() => !uploadingLogo && document.getElementById('logo-upload')?.click()}\n                >\n                  {logoPreview ? (\n                    <div className=\"space-y-4\">\n                      <img \n                        src={logoPreview} \n                        alt=\"Logo preview\" \n                        className=\"h-16 w-auto mx-auto rounded-lg border border-border\"\n                      />\n                      <p className=\"text-sm text-muted-foreground\">{logoFile?.name}</p>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          setLogoPreview('');\n                          setLogoFile(null);\n                          setFormData(prev => ({ ...prev, logoUrl: '' }));\n                        }}\n                      >\n                        Remove\n                      </Button>\n                    </div>\n                  ) : (\n                    <>\n                      <CloudUpload className={`h-8 w-8 mx-auto mb-4 ${uploadingLogo ? 'animate-pulse text-primary' : 'text-muted-foreground'}`} />\n                      <p className=\"text-muted-foreground mb-2\">\n                        {uploadingLogo ? 'Uploading...' : 'Drop your logo here, or'} \n                        {!uploadingLogo && <span className=\"text-primary cursor-pointer\"> browse</span>}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">PNG, JPG up to 2MB</p>\n                    </>\n                  )}\n                  <input\n                    id=\"logo-upload\"\n                    type=\"file\"\n                    accept=\"image/png,image/jpeg,image/jpg\"\n                    className=\"hidden\"\n                    disabled={uploadingLogo}\n                    onChange={(e) => {\n                      const file = e.target.files?.[0];\n                      if (file) {\n                        if (file.size > 2 * 1024 * 1024) {\n                          toast({\n                            title: \"File too large\",\n                            description: \"Please select an image under 2MB\",\n                            variant: \"destructive\"\n                          });\n                          return;\n                        }\n                        handleLogoUpload(file);\n                      }\n                    }}\n                  />\n                </div>\n              </div>\n              \n              <div className=\"space-y-6\">\n                <div>\n                  <Label className=\"flex items-center space-x-2\">\n                    <Palette className=\"h-4 w-4\" />\n                    <span>Color Theme</span>\n                  </Label>\n                  <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3 mt-3\">\n                    {colorThemes.map((theme, index) => (\n                      <button\n                        key={index}\n                        type=\"button\"\n                        onClick={() => selectColorTheme(theme)}\n                        className={`p-3 rounded-xl border-2 transition-all ${\n                          formData.primaryColor === theme.primary \n                            ? 'border-primary ring-2 ring-primary/20' \n                            : 'border-border hover:border-primary/50'\n                        }`}\n                      >\n                        <div \n                          className={`h-8 w-full rounded-lg bg-gradient-to-r ${theme.gradient} mb-2`}\n                        />\n                        <p className=\"text-sm font-medium text-foreground\">{theme.name}</p>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <Label className=\"flex items-center space-x-2\">\n                    <Image className=\"h-4 w-4\" />\n                    <span>Background Style</span>\n                  </Label>\n                  <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3 mt-3\">\n                    {backgroundOptions.map((bg, index) => (\n                      <button\n                        key={index}\n                        type=\"button\"\n                        onClick={() => setFormData(prev => ({ \n                          ...prev, \n                          backgroundType: bg.type, \n                          backgroundValue: bg.value \n                        }))}\n                        className={`p-3 rounded-xl border-2 transition-all ${\n                          formData.backgroundValue === bg.value \n                            ? 'border-primary ring-2 ring-primary/20' \n                            : 'border-border hover:border-primary/50'\n                        }`}\n                      >\n                        <div className={`h-8 w-full rounded-lg ${bg.class} mb-2 border border-border/20`} />\n                        <p className=\"text-sm font-medium text-foreground\">{bg.name}</p>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <Label className=\"flex items-center space-x-2\">\n                    <span className=\"text-sm font-medium\">Font Style</span>\n                  </Label>\n                  <div className=\"grid grid-cols-2 gap-3 mt-3\">\n                    {fontOptions.map((font, index) => (\n                      <button\n                        key={index}\n                        type=\"button\"\n                        onClick={() => setFormData(prev => ({ ...prev, fontFamily: font.value }))}\n                        className={`p-3 rounded-xl border-2 transition-all ${\n                          formData.fontFamily === font.value \n                            ? 'border-primary ring-2 ring-primary/20' \n                            : 'border-border hover:border-primary/50'\n                        }`}\n                      >\n                        <div className={`text-center ${font.class}`}>\n                          <p className=\"text-lg font-semibold mb-1\">Sample Text</p>\n                          <p className=\"text-xs text-muted-foreground\">{font.name}</p>\n                        </div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"primaryColor\">Custom Primary Color</Label>\n                  <div className=\"flex items-center space-x-4 mt-2\">\n                    <input\n                      type=\"color\"\n                      value={formData.primaryColor}\n                      onChange={(e) => setFormData(prev => ({ ...prev, primaryColor: e.target.value }))}\n                      className=\"w-12 h-12 border border-border rounded-lg cursor-pointer\"\n                      data-testid=\"input-primary-color\"\n                    />\n                    <Input\n                      value={formData.primaryColor}\n                      onChange={(e) => setFormData(prev => ({ ...prev, primaryColor: e.target.value }))}\n                      className=\"flex-1\"\n                      placeholder=\"#2563eb\"\n                      data-testid=\"input-primary-color-hex\"\n                    />\n                  </div>\n                </div>\n              </div>\n              \n              <div>\n                <Label>Services</Label>\n                <div className=\"space-y-4\">\n                  {formData.services.map((service, index) => (\n                    <div key={index} className=\"grid md:grid-cols-4 gap-4 p-4 border border-border rounded-xl\">\n                      <Input\n                        placeholder=\"Service name\"\n                        value={service.name}\n                        onChange={(e) => updateService(index, 'name', e.target.value)}\n                        data-testid={`input-service-name-${index}`}\n                      />\n                      <Input\n                        type=\"number\"\n                        placeholder=\"Duration (min)\"\n                        value={service.durationMinutes}\n                        onChange={(e) => updateService(index, 'durationMinutes', parseInt(e.target.value))}\n                        data-testid={`input-service-duration-${index}`}\n                      />\n                      <div className=\"flex\">\n                        <span className=\"inline-flex items-center px-3 rounded-l-lg border border-r-0 border-border bg-muted text-muted-foreground text-sm\">\n                          $\n                        </span>\n                        <Input\n                          type=\"number\"\n                          placeholder=\"Price\"\n                          value={service.price}\n                          onChange={(e) => updateService(index, 'price', e.target.value)}\n                          className=\"rounded-l-none\"\n                          data-testid={`input-service-price-${index}`}\n                        />\n                      </div>\n                      {formData.services.length > 1 && (\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"icon\"\n                          onClick={() => removeService(index)}\n                          data-testid={`button-remove-service-${index}`}\n                        >\n                          <X className=\"h-4 w-4\" />\n                        </Button>\n                      )}\n                    </div>\n                  ))}\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-dashed\"\n                    onClick={addService}\n                    data-testid=\"button-add-service\"\n                  >\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Another Service\n                  </Button>\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"calendarLink\">Calendar Integration</Label>\n                <Input\n                  id=\"calendarLink\"\n                  type=\"url\"\n                  placeholder=\"Google Calendar, Calendly, or other calendar link\"\n                  value={formData.calendarLink}\n                  onChange={(e) => setFormData(prev => ({ ...prev, calendarLink: e.target.value }))}\n                  data-testid=\"input-calendar-link\"\n                />\n              </div>\n              \n              <div className=\"flex space-x-4 pt-6\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  className=\"flex-1\"\n                  onClick={() => setLocation('/dashboard')}\n                  data-testid=\"button-cancel\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  variant=\"default\"\n                  className=\"flex-1 bg-primary text-primary-foreground hover:bg-primary/90 shadow-md\"\n                  disabled={createPageMutation.isPending}\n                  data-testid=\"button-create-page\"\n                >\n                  {createPageMutation.isPending ? 'Creating...' : 'Create Page'}\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":20989},"client/src/pages/dashboard.tsx":{"content":"import { useState } from 'react';\nimport Sidebar from '@/components/dashboard/sidebar';\nimport Overview from '@/components/dashboard/overview';\nimport PagesList from '@/components/dashboard/pages-list';\nimport AppointmentsList from '@/components/dashboard/appointments-list';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Bell, Crown } from 'lucide-react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport UpgradeModal from '@/components/modals/upgrade-modal';\n\nexport default function Dashboard() {\n  const { user, profile } = useAuth();\n  const [activeSection, setActiveSection] = useState('overview');\n\n  const renderContent = () => {\n    switch (activeSection) {\n      case 'pages':\n        return <PagesList />;\n      case 'appointments':\n        return <AppointmentsList />;\n      case 'analytics':\n        return <AnalyticsSection />;\n      case 'settings':\n        return <SettingsSection />;\n      default:\n        return <Overview onSectionChange={setActiveSection} />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"flex\">\n        <Sidebar activeSection={activeSection} onSectionChange={setActiveSection} />\n        \n        <div className=\"flex-1\">\n          {/* Header */}\n          <header className=\"dashboard-header px-8 py-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-2xl font-bold text-foreground\">Dashboard</h1>\n                <p className=\"text-muted-foreground\">Manage your booking pages and appointments</p>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 rounded-full bg-muted flex items-center justify-center\">\n                    <span className=\"text-sm font-medium text-muted-foreground\">\n                      {(user?.fullName || user?.email)?.charAt(0)?.toUpperCase() || 'U'}\n                    </span>\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium text-foreground\" data-testid=\"text-username\">\n                      {profile?.fullName || user?.email}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\" data-testid=\"text-membership-status\">\n                      {profile?.membershipStatus === 'pro' ? 'Pro Plan' : 'Free Plan'}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </header>\n\n          {/* Content */}\n          <div className=\"p-8\">\n            {renderContent()}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction AnalyticsSection() {\n  return (\n    <div>\n      <div className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold text-foreground mb-2\">Analytics</h2>\n        <p className=\"text-muted-foreground\">Track your booking performance and revenue</p>\n      </div>\n\n      <div className=\"grid lg:grid-cols-2 gap-6 mb-8\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-sm font-medium text-muted-foreground\">Conversion Rate</h3>\n              <div className=\"w-4 h-4 text-blue-600\">üìä</div>\n            </div>\n            <div className=\"text-3xl font-bold text-foreground mb-2\">--%</div>\n            <p className=\"text-sm text-blue-600\">Create pages to track conversions</p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-sm font-medium text-muted-foreground\">Avg. Booking Value</h3>\n              <div className=\"w-4 h-4 text-purple-600\">üìà</div>\n            </div>\n            <div className=\"text-3xl font-bold text-foreground mb-2\">$0</div>\n            <p className=\"text-sm text-purple-600\">No bookings yet</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-foreground mb-6\">Booking Trends</h3>\n          <div className=\"h-64 bg-muted/30 rounded-lg flex items-center justify-center\">\n            <div className=\"text-center\">\n              <div className=\"text-4xl text-muted-foreground mb-4\">üìä</div>\n              <p className=\"text-muted-foreground\">Analytics will appear here once you have booking data</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nfunction SettingsSection() {\n  const { user, profile } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showUpgradeModal, setShowUpgradeModal] = useState(false);\n  const [formData, setFormData] = useState({\n    fullName: profile?.fullName || '',\n    email: user?.email || '',\n    timezone: 'pacific'\n  });\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: { fullName: string; timezone: string }) => {\n      const response = await apiRequest('PATCH', '/api/profile', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/profile'] });\n      toast({\n        title: \"Profile updated!\",\n        description: \"Your profile changes have been saved.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update failed\",\n        description: error.message || \"Failed to update profile. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n  \n  return (\n    <div>\n      <div className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold text-foreground mb-2\">Settings</h2>\n        <p className=\"text-muted-foreground\">Manage your account and preferences</p>\n      </div>\n\n      <div className=\"grid lg:grid-cols-3 gap-8\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-foreground mb-6\">Profile Information</h3>\n            <form className=\"space-y-4\" onSubmit={(e) => {\n              e.preventDefault();\n              updateProfileMutation.mutate({\n                fullName: formData.fullName,\n                timezone: formData.timezone\n              });\n            }}>\n              <div>\n                <Label htmlFor=\"fullName\">Full Name</Label>\n                <Input \n                  id=\"fullName\"\n                  type=\"text\" \n                  value={formData.fullName}\n                  onChange={(e) => setFormData(prev => ({ ...prev, fullName: e.target.value }))}\n                  data-testid=\"input-fullname\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"email\">Email</Label>\n                <Input \n                  id=\"email\"\n                  type=\"email\" \n                  value={formData.email}\n                  disabled\n                  data-testid=\"input-email\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"timezone\">Time Zone</Label>\n                <Select value={formData.timezone} onValueChange={(value) => setFormData(prev => ({ ...prev, timezone: value }))}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select timezone\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"pacific\">UTC-08:00 (Pacific Time)</SelectItem>\n                    <SelectItem value=\"eastern\">UTC-05:00 (Eastern Time)</SelectItem>\n                    <SelectItem value=\"gmt\">UTC+00:00 (GMT)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <Button type=\"submit\" size=\"lg\" variant=\"default\" className=\"bg-primary text-primary-foreground hover:bg-primary/90 shadow-md px-8\" data-testid=\"button-save-changes\">\n                Save Changes\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-foreground mb-6\">Notification Preferences</h3>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium text-foreground\">Email Notifications</p>\n                  <p className=\"text-sm text-muted-foreground\">Receive booking confirmations via email</p>\n                </div>\n                <Checkbox defaultChecked />\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium text-foreground\">SMS Reminders</p>\n                  <p className=\"text-sm text-muted-foreground\">Get text reminders for upcoming appointments</p>\n                </div>\n                <Checkbox />\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium text-foreground\">Marketing Updates</p>\n                  <p className=\"text-sm text-muted-foreground\">Receive product updates and tips</p>\n                </div>\n                <Checkbox defaultChecked />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-foreground mb-6\">Subscription</h3>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium text-foreground\">Current Plan</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {profile?.membershipStatus === 'pro' ? 'Pro Plan' : 'Free Trial (Upgrade Required)'}\n                  </p>\n                </div>\n                <div className=\"text-right\">\n                  {profile?.membershipStatus === 'pro' ? (\n                    <div className=\"text-sm text-green-600 font-medium\">Active</div>\n                  ) : (\n                    <Button \n                      onClick={() => setShowUpgradeModal(true)} \n                      size=\"sm\"\n                      data-testid=\"button-upgrade-pro\"\n                    >\n                      Upgrade to Pro\n                    </Button>\n                  )}\n                </div>\n              </div>\n              \n              {profile?.membershipStatus === 'pro' && profile?.membershipExpires && (\n                <div className=\"flex items-center justify-between border-t pt-4\">\n                  <div>\n                    <p className=\"font-medium text-foreground\">Renewal Date</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {new Date(profile.membershipExpires).toLocaleDateString()}\n                    </p>\n                  </div>\n                </div>\n              )}\n              \n              <div className=\"bg-muted/50 p-4 rounded-lg\">\n                <p className=\"text-sm text-muted-foreground\">\n                  {profile?.membershipStatus === 'pro' \n                    ? 'You have full access to all BookingGen features including unlimited booking pages, payment processing, and analytics.' \n                    : 'Upgrade to Pro ($10/month) to create unlimited booking pages and access all features.'}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <UpgradeModal \n        isOpen={showUpgradeModal} \n        onClose={() => setShowUpgradeModal(false)} \n      />\n    </div>\n  );\n}\n","size_bytes":12174},"client/src/pages/home.tsx":{"content":"import Header from '@/components/layout/header';\nimport Footer from '@/components/layout/footer';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { useLocation } from 'wouter';\nimport heroImage from '@assets/Hero image (1)_1757961964946.png';\nimport { \n  Palette, \n  CalendarCheck, \n  CreditCard, \n  Smartphone, \n  BarChart3, \n  Bell,\n  ArrowRight,\n  Play,\n  Check,\n  Star,\n  Users,\n  Clock,\n  DollarSign,\n  Zap,\n  Globe,\n  Shield,\n  Target,\n  BookOpen,\n  Heart,\n  Coffee,\n  Scissors,\n  Monitor,\n  Calendar\n} from 'lucide-react';\n\nexport default function Home() {\n  const [, setLocation] = useLocation();\n\n  const features = [\n    {\n      icon: Palette,\n      title: \"Custom Branding\",\n      description: \"Personalize your booking pages with your logo, colors, and custom domain to match your brand perfectly.\"\n    },\n    {\n      icon: CalendarCheck,\n      title: \"Smart Scheduling\",\n      description: \"Intelligent calendar integration with availability management, time zone detection, and automated confirmations.\"\n    },\n    {\n      icon: CreditCard,\n      title: \"Secure Payments\",\n      description: \"Accept payments instantly with Razorpay integration. Secure, fast, and supports multiple payment methods.\"\n    },\n    {\n      icon: Smartphone,\n      title: \"Mobile Optimized\",\n      description: \"Beautiful, responsive designs that work perfectly on all devices. Your clients can book from anywhere.\"\n    },\n    {\n      icon: BarChart3,\n      title: \"Analytics Dashboard\",\n      description: \"Track bookings, revenue, and customer insights with powerful analytics and reporting tools.\"\n    },\n    {\n      icon: Bell,\n      title: \"Smart Notifications\",\n      description: \"Automated email and SMS reminders keep you and your clients informed about upcoming appointments.\"\n    }\n  ];\n\n  const steps = [\n    {\n      number: \"1\",\n      title: \"Create Your Page\",\n      description: \"Design your booking page with our intuitive editor. Add your services, set your availability, and customize your branding.\"\n    },\n    {\n      number: \"2\",\n      title: \"Share Your Link\",\n      description: \"Get a beautiful, shareable link for your booking page. Add it to your website, social media, or email signature.\"\n    },\n    {\n      number: \"3\",\n      title: \"Accept Bookings\",\n      description: \"Start receiving bookings instantly. Manage appointments, accept payments, and grow your business effortlessly.\"\n    }\n  ];\n\n  const testimonials = [\n    {\n      name: \"Sarah Chen\",\n      role: \"Yoga Instructor\",\n      content: \"BookingGen transformed my business. I went from managing bookings in spreadsheets to having a professional system that handles everything automatically.\",\n      rating: 5,\n      avatar: \"SC\"\n    },\n    {\n      name: \"Marcus Johnson\",\n      role: \"Business Consultant\",\n      content: \"The payment integration saved me so much time. Clients can book and pay instantly, and I get notifications for everything. Perfect for consultants!\",\n      rating: 5,\n      avatar: \"MJ\"\n    },\n    {\n      name: \"Elena Rodriguez\",\n      role: \"Personal Trainer\",\n      content: \"My clients love how easy it is to book sessions. The mobile experience is flawless, and I've seen a 40% increase in bookings since switching.\",\n      rating: 5,\n      avatar: \"ER\"\n    }\n  ];\n\n  const useCases = [\n    {\n      icon: Heart,\n      title: \"Healthcare & Wellness\",\n      description: \"Therapists, counselors, fitness trainers, and wellness coaches\",\n      examples: [\"Medical consultations\", \"Therapy sessions\", \"Personal training\", \"Spa treatments\"]\n    },\n    {\n      icon: Coffee,\n      title: \"Professional Services\",\n      description: \"Consultants, coaches, and business professionals\",\n      examples: [\"Business consulting\", \"Life coaching\", \"Legal consultations\", \"Financial planning\"]\n    },\n    {\n      icon: Scissors,\n      title: \"Beauty & Lifestyle\",\n      description: \"Salons, stylists, photographers, and personal services\",\n      examples: [\"Hair appointments\", \"Photo shoots\", \"Makeup sessions\", \"Styling consultations\"]\n    },\n    {\n      icon: BookOpen,\n      title: \"Education & Tutoring\",\n      description: \"Teachers, tutors, and educational professionals\",\n      examples: [\"Private tutoring\", \"Music lessons\", \"Language coaching\", \"Skills training\"]\n    }\n  ];\n\n  const stats = [\n    { label: \"Active Users\", value: \"10,000+\", icon: Users },\n    { label: \"Bookings Processed\", value: \"50,000+\", icon: Calendar },\n    { label: \"Average Setup Time\", value: \"5 Minutes\", icon: Clock },\n    { label: \"Customer Satisfaction\", value: \"98%\", icon: Star }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      {/* Hero Section */}\n      <section className=\"premium-gradient pt-12 pb-24 lg:pt-16 lg:pb-32\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"grid lg:grid-cols-2 gap-20 items-center\">\n            <div className=\"space-y-10\">\n              <div className=\"space-y-6\">\n                <div className=\"inline-flex items-center px-6 py-3 glass-effect rounded-full text-primary text-sm font-medium\">\n                  <span className=\"w-2 h-2 bg-primary rounded-full mr-3\"></span>\n                  New: Advanced booking features\n                </div>\n                <h1 className=\"text-5xl lg:text-7xl font-bold leading-tight text-foreground\">\n                  Create <span className=\"text-primary\">beautiful booking pages</span> in minutes\n                </h1>\n                <p className=\"text-xl lg:text-2xl text-muted-foreground leading-relaxed max-w-2xl\">\n                  Design, customize, and launch professional booking pages that convert. \n                  Perfect for freelancers, consultants, and service providers.\n                </p>\n              </div>\n              <div className=\"flex flex-col sm:flex-row gap-6\">\n                <Button \n                  onClick={() => setLocation('/signup')}\n                  size=\"lg\"\n                  className=\"bg-primary hover:bg-primary/90 px-10 py-6 rounded-xl text-xl h-auto text-white font-semibold shadow-lg hover:shadow-xl transition-all\"\n                  data-testid=\"button-get-started\"\n                >\n                  Get Started ‚Ä¢ It's Free\n                  <ArrowRight className=\"ml-3 h-6 w-6\" />\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  size=\"lg\"\n                  className=\"px-10 py-6 rounded-xl text-xl h-auto border-border hover:bg-muted text-foreground\"\n                  onClick={() => setLocation('/tutorial')}\n                  data-testid=\"button-watch-demo\"\n                >\n                  <Play className=\"mr-3 h-6 w-6\" />\n                  See How It Works\n                </Button>\n              </div>\n              <div className=\"flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-8 text-sm text-muted-foreground\">\n                <div className=\"flex items-center\">\n                  <Check className=\"h-5 w-5 text-green-500 mr-3\" />\n                  No credit card required\n                </div>\n                <div className=\"flex items-center\">\n                  <Check className=\"h-5 w-5 text-green-500 mr-3\" />\n                  Free forever plan\n                </div>\n              </div>\n            </div>\n            <div className=\"relative lg:order-last\">\n              <div className=\"relative max-w-full overflow-hidden\">\n                <img \n                  src={heroImage} \n                  alt=\"BookingGen dashboard interface\" \n                  className=\"w-full h-auto object-contain lg:object-cover lg:max-h-[600px] xl:max-h-[700px]\"\n                />\n                <div className=\"absolute -inset-4 bg-gradient-to-r from-primary/20 to-blue-500/20 blur-2xl -z-10\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section id=\"features\" className=\"py-20 bg-muted/30\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl lg:text-5xl font-bold text-foreground mb-6\">\n              Everything you need to accept bookings\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Powerful features designed to help you create professional booking experiences that your clients will love.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <Card key={index} className=\"premium-card transition-all duration-300 border-0\">\n                <CardContent className=\"p-8\">\n                  <div className=\"feature-icon w-16 h-16 rounded-xl flex items-center justify-center mb-6\">\n                    <feature.icon className=\"h-8 w-8 text-primary\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-foreground mb-4\">{feature.title}</h3>\n                  <p className=\"text-muted-foreground\">{feature.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* How It Works */}\n      <section id=\"how-it-works\" className=\"py-20\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl lg:text-5xl font-bold text-foreground mb-6\">\n              Launch your booking page in 3 simple steps\n            </h2>\n          </div>\n\n          <div className=\"grid lg:grid-cols-3 gap-12\">\n            {steps.map((step, index) => (\n              <div key={index} className=\"text-center\">\n                <div className=\"w-20 h-20 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-6\">\n                  <span className=\"text-2xl font-bold text-primary\">{step.number}</span>\n                </div>\n                <h3 className=\"text-xl font-semibold text-foreground mb-4\">{step.title}</h3>\n                <p className=\"text-muted-foreground\">{step.description}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Booking Page Demo */}\n      <section className=\"py-20 bg-muted/30\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl lg:text-5xl font-bold text-foreground mb-6\">\n              See what your booking pages will look like\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Beautiful, professional booking pages that convert visitors into clients\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-16 items-center\">\n            {/* Desktop Demo */}\n            <div className=\"space-y-6\">\n              <div className=\"bg-background border border-border rounded-2xl p-8 shadow-2xl\">\n                <div className=\"flex items-center space-x-2 mb-6\">\n                  <div className=\"w-3 h-3 bg-red-400 rounded-full\"></div>\n                  <div className=\"w-3 h-3 bg-yellow-400 rounded-full\"></div>\n                  <div className=\"w-3 h-3 bg-green-400 rounded-full\"></div>\n                  <div className=\"ml-4 text-xs text-muted-foreground font-mono\">yourname.bookinggen.app</div>\n                </div>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-16 h-16 bg-primary/20 rounded-full flex items-center justify-center\">\n                      <Heart className=\"h-8 w-8 text-primary\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-xl font-bold text-foreground\">Dr. Sarah Wellness</h3>\n                      <p className=\"text-muted-foreground\">Therapy & Counseling</p>\n                    </div>\n                  </div>\n                  <div className=\"space-y-3\">\n                    <div className=\"p-4 bg-muted rounded-lg\">\n                      <h4 className=\"font-semibold text-foreground\">Individual Therapy Session</h4>\n                      <p className=\"text-sm text-muted-foreground\">50 minutes ‚Ä¢ $120</p>\n                    </div>\n                    <div className=\"p-4 bg-muted rounded-lg\">\n                      <h4 className=\"font-semibold text-foreground\">Couples Counseling</h4>\n                      <p className=\"text-sm text-muted-foreground\">60 minutes ‚Ä¢ $150</p>\n                    </div>\n                  </div>\n                  <Button className=\"w-full bg-primary text-primary-foreground\">\n                    Book Appointment\n                  </Button>\n                </div>\n              </div>\n              <div className=\"text-center\">\n                <h3 className=\"text-lg font-semibold text-foreground mb-2\">Desktop Experience</h3>\n                <p className=\"text-muted-foreground\">Clean, professional layout optimized for desktop users</p>\n              </div>\n            </div>\n\n            {/* Mobile Demo */}\n            <div className=\"flex justify-center\">\n              <div className=\"w-80 space-y-6\">\n                <div className=\"bg-background border border-border rounded-3xl p-6 shadow-2xl relative overflow-hidden\">\n                  <div className=\"absolute top-0 left-1/2 transform -translate-x-1/2 w-32 h-1 bg-muted rounded-b-lg\"></div>\n                  <div className=\"pt-4 space-y-4\">\n                    <div className=\"text-center\">\n                      <div className=\"w-12 h-12 bg-primary/20 rounded-full flex items-center justify-center mx-auto mb-2\">\n                        <Coffee className=\"h-6 w-6 text-primary\" />\n                      </div>\n                      <h3 className=\"text-lg font-bold text-foreground\">Mike's Barber Shop</h3>\n                      <p className=\"text-sm text-muted-foreground\">Premium cuts & styling</p>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <div className=\"p-3 bg-muted rounded-lg\">\n                        <h4 className=\"font-semibold text-sm text-foreground\">Classic Cut</h4>\n                        <p className=\"text-xs text-muted-foreground\">30 min ‚Ä¢ $35</p>\n                      </div>\n                      <div className=\"p-3 bg-muted rounded-lg\">\n                        <h4 className=\"font-semibold text-sm text-foreground\">Cut & Style</h4>\n                        <p className=\"text-xs text-muted-foreground\">45 min ‚Ä¢ $50</p>\n                      </div>\n                    </div>\n                    <Button size=\"sm\" className=\"w-full bg-primary text-primary-foreground\">\n                      Book Now\n                    </Button>\n                  </div>\n                </div>\n                <div className=\"text-center\">\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">Mobile Experience</h3>\n                  <p className=\"text-muted-foreground\">Perfect mobile design for on-the-go bookings</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"text-center mt-16\">\n            <Button \n              size=\"lg\"\n              onClick={() => setLocation('/tutorial')}\n              className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n              data-testid=\"button-see-tutorial\"\n            >\n              <Play className=\"mr-2 h-5 w-5\" />\n              See Full Tutorial\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <section className=\"py-20\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl lg:text-5xl font-bold text-foreground mb-6\">\n              Trusted by thousands of professionals\n            </h2>\n          </div>\n          \n          <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-8\">\n            {stats.map((stat, index) => (\n              <div key={index} className=\"text-center\" data-testid={`stat-${index}`}>\n                <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <stat.icon className=\"h-8 w-8 text-primary\" />\n                </div>\n                <div className=\"text-3xl font-bold text-foreground mb-2\" data-testid={`stat-value-${index}`}>\n                  {stat.value}\n                </div>\n                <div className=\"text-muted-foreground\" data-testid={`stat-label-${index}`}>\n                  {stat.label}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Use Cases Section */}\n      <section className=\"py-20 bg-muted/30\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl lg:text-5xl font-bold text-foreground mb-6\">\n              Perfect for any service-based business\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Join professionals across industries who trust BookingGen to manage their appointments\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {useCases.map((useCase, index) => (\n              <Card key={index} className=\"premium-card border-0\" data-testid={`use-case-${index}`}>\n                <CardContent className=\"p-6\">\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mb-4\">\n                    <useCase.icon className=\"h-6 w-6 text-primary\" />\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\" data-testid={`use-case-title-${index}`}>\n                    {useCase.title}\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground mb-4\" data-testid={`use-case-description-${index}`}>\n                    {useCase.description}\n                  </p>\n                  <div className=\"space-y-1\">\n                    {useCase.examples.map((example, exampleIndex) => (\n                      <div key={exampleIndex} className=\"flex items-center text-xs text-muted-foreground\">\n                        <Check className=\"h-3 w-3 text-green-500 mr-2 flex-shrink-0\" />\n                        {example}\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials Section */}\n      <section className=\"py-20\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl lg:text-5xl font-bold text-foreground mb-6\">\n              What our users are saying\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              See how BookingGen has transformed businesses just like yours\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {testimonials.map((testimonial, index) => (\n              <Card key={index} className=\"premium-card border-0\" data-testid={`testimonial-${index}`}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center mb-4\">\n                    {[...Array(testimonial.rating)].map((_, i) => (\n                      <Star key={i} className=\"h-4 w-4 text-yellow-400 fill-current\" />\n                    ))}\n                  </div>\n                  <p className=\"text-muted-foreground mb-6 italic\" data-testid={`testimonial-content-${index}`}>\n                    \"{testimonial.content}\"\n                  </p>\n                  <div className=\"flex items-center\">\n                    <div className=\"w-10 h-10 bg-primary/20 rounded-full flex items-center justify-center mr-3\">\n                      <span className=\"text-sm font-semibold text-primary\">{testimonial.avatar}</span>\n                    </div>\n                    <div>\n                      <div className=\"font-semibold text-foreground\" data-testid={`testimonial-name-${index}`}>\n                        {testimonial.name}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\" data-testid={`testimonial-role-${index}`}>\n                        {testimonial.role}\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-muted/30\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center max-w-3xl mx-auto\">\n            <h2 className=\"text-3xl lg:text-5xl font-bold text-foreground mb-6\">\n              Ready to transform your booking process?\n            </h2>\n            <p className=\"text-xl text-muted-foreground mb-8\">\n              Join thousands of professionals who have streamlined their business with BookingGen\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button \n                size=\"lg\"\n                onClick={() => setLocation('/signup')}\n                className=\"bg-primary text-primary-foreground hover:bg-primary/90 px-8\"\n                data-testid=\"button-cta-signup\"\n              >\n                Start Free Trial\n                <ArrowRight className=\"ml-2 h-5 w-5\" />\n              </Button>\n              <Button \n                size=\"lg\"\n                variant=\"outline\"\n                onClick={() => setLocation('/tutorial')}\n                data-testid=\"button-cta-tutorial\"\n              >\n                Watch Tutorial\n              </Button>\n            </div>\n            <div className=\"flex flex-col sm:flex-row items-center justify-center space-y-2 sm:space-y-0 sm:space-x-8 text-sm text-muted-foreground mt-6\">\n              <div className=\"flex items-center\">\n                <Check className=\"h-4 w-4 text-green-500 mr-2\" />\n                Free forever plan\n              </div>\n              <div className=\"flex items-center\">\n                <Check className=\"h-4 w-4 text-green-500 mr-2\" />\n                No setup fees\n              </div>\n              <div className=\"flex items-center\">\n                <Check className=\"h-4 w-4 text-green-500 mr-2\" />\n                Cancel anytime\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":22749},"client/src/pages/login.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { useToast } from '@/hooks/use-toast';\nimport { CalendarDays } from 'lucide-react';\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { login, signInWithGoogle } = useAuth();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n    remember: false\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      await login(formData.email, formData.password, '/dashboard');\n      toast({\n        title: \"Welcome back!\",\n        description: \"You have been successfully logged in.\",\n      });\n      // Redirect is now handled by the auth context\n    } catch (error) {\n      toast({\n        title: \"Login failed\",\n        description: \"Invalid email or password. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleGoogleSignIn = async () => {\n    try {\n      await signInWithGoogle();\n      // Note: Supabase OAuth will handle the redirect, so no need to manually redirect\n    } catch (error) {\n      toast({\n        title: \"Google Sign In failed\",\n        description: \"Failed to sign in with Google. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-6\">\n      <Card className=\"w-full max-w-md\">\n        <CardContent className=\"p-8\">\n          <div className=\"text-center mb-8\">\n            <div className=\"flex items-center justify-center space-x-3 mb-4\">\n              <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n                <CalendarDays className=\"h-6 w-6 text-primary-foreground\" />\n              </div>\n              <span className=\"text-xl font-bold text-foreground\">BookingGen</span>\n            </div>\n            <h1 className=\"text-2xl font-bold text-foreground mb-2\">Welcome back</h1>\n            <p className=\"text-muted-foreground\">Sign in to your BookingGen account</p>\n          </div>\n          \n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div>\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                value={formData.email}\n                onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                required\n                data-testid=\"input-email\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"Enter your password\"\n                value={formData.password}\n                onChange={(e) => setFormData(prev => ({ ...prev, password: e.target.value }))}\n                required\n                data-testid=\"input-password\"\n              />\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox \n                  id=\"remember\"\n                  checked={formData.remember}\n                  onCheckedChange={(checked) => setFormData(prev => ({ ...prev, remember: !!checked }))}\n                />\n                <Label htmlFor=\"remember\" className=\"text-sm\">Remember me</Label>\n              </div>\n              <Button variant=\"link\" className=\"text-sm p-0\">\n                Forgot password?\n              </Button>\n            </div>\n            \n            <Button \n              type=\"submit\" \n              size=\"lg\"\n              variant=\"default\"\n              className=\"w-full h-12 bg-primary text-primary-foreground hover:bg-primary/90 shadow-md\"\n              disabled={loading}\n              data-testid=\"button-sign-in\"\n            >\n              {loading ? \"Signing in...\" : \"Sign In\"}\n            </Button>\n            \n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <div className=\"w-full border-t border-border\"></div>\n              </div>\n              <div className=\"relative flex justify-center text-sm\">\n                <span className=\"px-2 bg-background text-muted-foreground\">Or continue with</span>\n              </div>\n            </div>\n            \n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              size=\"lg\"\n              className=\"w-full h-12 border-2 hover:bg-muted/50\"\n              onClick={handleGoogleSignIn}\n              data-testid=\"button-google-signin\"\n            >\n              <svg className=\"mr-2 h-4 w-4\" viewBox=\"0 0 24 24\">\n                <path fill=\"currentColor\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                <path fill=\"currentColor\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                <path fill=\"currentColor\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                <path fill=\"currentColor\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n              </svg>\n              Sign in with Google\n            </Button>\n          </form>\n          \n          <div className=\"text-center mt-6\">\n            <p className=\"text-muted-foreground\">\n              Don't have an account?{' '}\n              <Button \n                variant=\"link\" \n                className=\"p-0\"\n                onClick={() => setLocation('/signup')}\n                data-testid=\"link-signup\"\n              >\n                Sign up\n              </Button>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6536},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/pricing.tsx":{"content":"import Header from '@/components/layout/header';\nimport Footer from '@/components/layout/footer';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { useLocation } from 'wouter';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Check } from 'lucide-react';\n\nexport default function Pricing() {\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n\n  const plans = [\n    {\n      name: \"Pro\",\n      description: \"Everything you need to succeed\",\n      price: 10,\n      features: [\n        \"Unlimited booking pages\",\n        \"Full customization\",\n        \"Unlimited bookings\",\n        \"Payment processing\",\n        \"Analytics dashboard\",\n        \"Priority support\",\n        \"Custom branding\",\n        \"Mobile optimized\"\n      ],\n      buttonText: user ? \"Upgrade to Pro\" : \"Get Started\",\n      buttonAction: () => {\n        if (user) {\n          // TODO: Open payment modal\n          setLocation('/dashboard');\n        } else {\n          setLocation('/signup');\n        }\n      },\n      isPrimary: true,\n      badge: \"Essential\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <section className=\"py-20 bg-muted/30\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-16\">\n            <h1 className=\"text-3xl lg:text-5xl font-bold text-foreground mb-6\">\n              One plan, all features\n            </h1>\n            <p className=\"text-xl text-muted-foreground\">\n              Get everything you need to create beautiful booking pages and grow your business.\n            </p>\n          </div>\n\n          <div className=\"flex justify-center\">\n            <div className=\"max-w-md w-full\">\n              {plans.map((plan, index) => (\n              <Card \n                key={index} \n                className={`relative ${plan.isPrimary ? 'border-2 border-primary' : ''}`}\n              >\n                {plan.badge && (\n                  <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n                    <span className=\"bg-primary text-primary-foreground px-4 py-2 rounded-full text-sm font-medium\">\n                      {plan.badge}\n                    </span>\n                  </div>\n                )}\n                <CardContent className=\"p-8\">\n                  <div className=\"mb-8\">\n                    <h3 className=\"text-2xl font-bold text-foreground mb-2\">{plan.name}</h3>\n                    <p className=\"text-muted-foreground mb-4\">{plan.description}</p>\n                    <div className=\"text-4xl font-bold text-foreground\">\n                      {plan.price === null ? \"Custom\" : `$${plan.price}`}\n                      {plan.price !== null && (\n                        <span className=\"text-lg font-normal text-muted-foreground\">/month</span>\n                      )}\n                    </div>\n                  </div>\n                  <ul className=\"space-y-4 mb-8\">\n                    {plan.features.map((feature, featureIndex) => (\n                      <li key={featureIndex} className=\"flex items-center\">\n                        <Check className=\"h-5 w-5 text-green-500 mr-3\" />\n                        <span className=\"text-muted-foreground\">{feature}</span>\n                      </li>\n                    ))}\n                  </ul>\n                  <Button\n                    onClick={plan.buttonAction}\n                    className={`w-full ${plan.isPrimary ? 'button-gradient' : ''}`}\n                    variant={plan.isPrimary ? 'default' : 'outline'}\n                    data-testid={`button-${plan.name.toLowerCase()}-plan`}\n                  >\n                    {plan.buttonText}\n                  </Button>\n                </CardContent>\n              </Card>\n              ))}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":3936},"client/src/pages/public-booking.tsx":{"content":"import { useState } from 'react';\nimport { useParams } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport BookingModal from '@/components/modals/booking-modal';\nimport { Phone, Calendar, ArrowLeft, Clock, DollarSign } from 'lucide-react';\n\nexport default function PublicBooking() {\n  const { slug } = useParams();\n  const [showBookingModal, setShowBookingModal] = useState(false);\n\n  const { data: pageData, isLoading, error } = useQuery<any>({\n    queryKey: [`/api/pages/${slug}`],\n    enabled: !!slug,\n  });\n\n  // Create dynamic styles based on page theme data\n  const getThemeStyles = (page: any) => {\n    const primaryColor = page.primaryColor || '#2563eb';\n    const backgroundType = page.backgroundType || 'gradient';\n    const backgroundValue = page.backgroundValue || 'blue';\n    const fontFamily = page.fontFamily || 'inter';\n    \n    // Background style mapping\n    const backgroundClasses = {\n      'blue': backgroundType === 'gradient' ? 'bg-gradient-to-br from-blue-50 to-blue-100' : 'bg-blue-50',\n      'green': backgroundType === 'gradient' ? 'bg-gradient-to-br from-emerald-50 to-emerald-100' : 'bg-emerald-50',\n      'purple': backgroundType === 'gradient' ? 'bg-gradient-to-br from-violet-50 to-violet-100' : 'bg-violet-50',\n      'rose': backgroundType === 'gradient' ? 'bg-gradient-to-br from-rose-50 to-rose-100' : 'bg-rose-50',\n      'white': 'bg-white',\n      'gray': 'bg-gray-50'\n    };\n    \n    // Font family mapping\n    const fontClasses = {\n      'inter': 'font-inter',\n      'playfair': 'font-playfair',\n      'roboto': 'font-roboto',\n      'opensans': 'font-opensans'\n    };\n    \n    return {\n      backgroundColor: backgroundClasses[backgroundValue as keyof typeof backgroundClasses] || backgroundClasses.blue,\n      fontClass: fontClasses[fontFamily as keyof typeof fontClasses] || fontClasses.inter,\n      primaryColor,\n      cssVariables: {\n        '--theme-primary': primaryColor,\n        '--theme-primary-rgb': hexToRgb(primaryColor)\n      } as React.CSSProperties\n    };\n  };\n  \n  // Helper function to convert hex to RGB\n  const hexToRgb = (hex: string) => {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result \n      ? `${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(result[3], 16)}`\n      : '37, 99, 235'; // fallback to blue\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (error || !pageData) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <Card className=\"max-w-md mx-4\">\n          <CardContent className=\"p-8 text-center\">\n            <div className=\"text-4xl text-muted-foreground mb-4\">üòï</div>\n            <h1 className=\"text-2xl font-bold text-foreground mb-2\">Page Not Found</h1>\n            <p className=\"text-muted-foreground mb-6\">\n              The booking page you're looking for doesn't exist or has been removed.\n            </p>\n            <Button onClick={() => window.history.back()}>\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Go Back\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const page = pageData;\n  const services = pageData.services || [];\n  const themeStyles = page ? getThemeStyles(page) : null;\n\n  return (\n    <div \n      className={`min-h-screen ${themeStyles?.backgroundColor || 'bg-background'} ${themeStyles?.fontClass || 'font-inter'}`}\n      style={themeStyles?.cssVariables}\n    >\n      {/* Header */}\n      <header className=\"border-b border-border bg-card/80 backdrop-blur-md sticky top-0 z-50\">\n        <div className=\"container mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              {page.logoUrl ? (\n                <img \n                  src={page.logoUrl} \n                  alt={`${page.title} logo`}\n                  className=\"w-10 h-10 rounded-lg object-cover\"\n                />\n              ) : (\n                <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n                  <span className=\"text-xl font-bold text-primary-foreground\">\n                    {page.title?.charAt(0) || 'B'}\n                  </span>\n                </div>\n              )}\n              <span className=\"text-xl font-bold text-foreground\">{page.title}</span>\n            </div>\n            <Button \n              variant=\"ghost\"\n              onClick={() => window.history.back()}\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section \n        className=\"py-24 relative overflow-hidden\"\n        style={{\n          background: themeStyles \n            ? `linear-gradient(135deg, rgba(${hexToRgb(themeStyles.primaryColor)}, 0.1) 0%, rgba(${hexToRgb(themeStyles.primaryColor)}, 0.05) 100%)`\n            : 'linear-gradient(135deg, rgba(37, 99, 235, 0.1) 0%, rgba(37, 99, 235, 0.05) 100%)'\n        }}\n      >\n        <div className=\"absolute inset-0 bg-grid-pattern opacity-5\"></div>\n        <div className=\"container mx-auto px-6 text-center relative z-10\">\n          <h1 className=\"text-4xl lg:text-5xl font-bold text-foreground mb-6\">\n            {page.title}\n          </h1>\n          {page.tagline && (\n            <p className=\"text-xl text-muted-foreground mb-8 max-w-3xl mx-auto\">\n              {page.tagline}\n            </p>\n          )}\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button \n              onClick={() => setShowBookingModal(true)}\n              className=\"px-8 py-4 rounded-xl text-lg h-auto text-white font-semibold shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-200\"\n              style={{\n                background: themeStyles ? `linear-gradient(135deg, ${themeStyles.primaryColor} 0%, ${themeStyles.primaryColor}dd 100%)` : 'linear-gradient(135deg, #2563eb 0%, #2563ebdd 100%)'\n              }}\n              data-testid=\"button-book-appointment\"\n            >\n              <Calendar className=\"h-5 w-5 mr-2\" />\n              Book an Appointment\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"px-8 py-4 rounded-xl text-lg h-auto\"\n              asChild\n              data-testid=\"button-call-us\"\n            >\n              <a href=\"tel:+1234567890\">\n                <Phone className=\"h-5 w-5 mr-2\" />\n                Call Us!\n              </a>\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Services Section */}\n      {services.length > 0 && (\n        <section className=\"py-24\">\n          <div className=\"container mx-auto px-6\">\n            <div className=\"text-center mb-20\">\n              <h2 className=\"text-4xl lg:text-5xl font-bold text-foreground mb-6\">Our Services</h2>\n              <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">Choose the perfect session for your journey and experience our professional services</p>\n            </div>\n\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-7xl mx-auto\">\n              {services.map((service: any) => (\n                <Card key={service.id} className=\"group hover:shadow-2xl transition-all duration-300 border-0 shadow-lg hover:-translate-y-2\">\n                  <CardContent className=\"p-8 h-full flex flex-col\">\n                    <div \n                      className=\"w-16 h-16 rounded-xl flex items-center justify-center mb-6 group-hover:scale-110 transition-transform duration-200\"\n                      style={{\n                        background: themeStyles ? `linear-gradient(135deg, ${themeStyles.primaryColor}20 0%, ${themeStyles.primaryColor}10 100%)` : 'linear-gradient(135deg, rgba(37, 99, 235, 0.2) 0%, rgba(37, 99, 235, 0.1) 100%)'\n                      }}\n                    >\n                      <Calendar \n                        className=\"h-8 w-8\" \n                        style={{ color: themeStyles?.primaryColor || '#2563eb' }}\n                      />\n                    </div>\n                    <h3 className=\"text-xl font-semibold text-foreground mb-4\">{service.name}</h3>\n                    {service.description && (\n                      <p className=\"text-muted-foreground mb-6\">{service.description}</p>\n                    )}\n                    <div className=\"flex items-center justify-between mb-6\">\n                      <div className=\"flex items-center text-2xl font-bold text-foreground\">\n                        <DollarSign className=\"h-6 w-6\" />\n                        {service.price}\n                      </div>\n                      <div className=\"flex items-center text-muted-foreground\">\n                        <Clock className=\"h-4 w-4 mr-1\" />\n                        {service.durationMinutes} minutes\n                      </div>\n                    </div>\n                    <Button \n                      onClick={() => setShowBookingModal(true)}\n                      className=\"w-full text-white font-semibold rounded-lg py-3 hover:shadow-lg transform hover:scale-105 transition-all duration-200\"\n                      style={{\n                        background: themeStyles ? `linear-gradient(135deg, ${themeStyles.primaryColor} 0%, ${themeStyles.primaryColor}dd 100%)` : 'linear-gradient(135deg, #2563eb 0%, #2563ebdd 100%)'\n                      }}\n                      data-testid={`button-book-${service.id}`}\n                    >\n                      Book Now\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        </section>\n      )}\n\n      {/* Contact Section */}\n      <section className=\"py-20 bg-muted/30\">\n        <div className=\"container mx-auto px-6 text-center\">\n          <h2 className=\"text-3xl lg:text-4xl font-bold text-foreground mb-6\">Ready to Get Started?</h2>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            Take the first step toward your goals. Book your session today and let's create a plan that works for you.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button \n              onClick={() => setShowBookingModal(true)}\n              className=\"button-gradient px-8 py-4 rounded-xl text-lg h-auto\"\n              data-testid=\"button-book-appointment-cta\"\n            >\n              <Calendar className=\"h-5 w-5 mr-2\" />\n              Book an Appointment\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"px-8 py-4 rounded-xl text-lg h-auto\"\n              asChild\n              data-testid=\"button-call-us-cta\"\n            >\n              <a href=\"tel:+1234567890\">\n                <Phone className=\"h-5 w-5 mr-2\" />\n                Call Us: (123) 456-7890\n              </a>\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Booking Modal */}\n      <BookingModal \n        open={showBookingModal} \n        onClose={() => setShowBookingModal(false)}\n        page={page}\n        services={services}\n      />\n    </div>\n  );\n}\n","size_bytes":11647},"client/src/pages/signup.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { useToast } from '@/hooks/use-toast';\nimport { CalendarDays } from 'lucide-react';\n\nexport default function Signup() {\n  const [, setLocation] = useLocation();\n  const { signup, signInWithGoogle } = useAuth();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n  const [formData, setFormData] = useState({\n    fullName: '',\n    email: '',\n    password: '',\n    agreeToTerms: false\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.agreeToTerms) {\n      toast({\n        title: \"Please accept the terms\",\n        description: \"You must agree to the Terms of Service and Privacy Policy.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      await signup(formData.email, formData.password, formData.fullName);\n      toast({\n        title: \"Account created!\",\n        description: \"Welcome to BookingGen. Let's get you started.\",\n      });\n      setLocation('/dashboard');\n    } catch (error) {\n      toast({\n        title: \"Signup failed\",\n        description: \"Failed to create account. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleGoogleSignUp = async () => {\n    try {\n      await signInWithGoogle();\n      // Note: Supabase OAuth will handle the redirect, so no need to manually redirect\n    } catch (error) {\n      toast({\n        title: \"Google Sign Up failed\",\n        description: \"Failed to sign up with Google. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-6\">\n      <Card className=\"w-full max-w-md\">\n        <CardContent className=\"p-8\">\n          <div className=\"text-center mb-8\">\n            <div className=\"flex items-center justify-center space-x-3 mb-4\">\n              <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n                <CalendarDays className=\"h-6 w-6 text-primary-foreground\" />\n              </div>\n              <span className=\"text-xl font-bold text-foreground\">BookingGen</span>\n            </div>\n            <h1 className=\"text-2xl font-bold text-foreground mb-2\">Create your account</h1>\n            <p className=\"text-muted-foreground\">Start creating beautiful booking pages today</p>\n          </div>\n          \n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div>\n              <Label htmlFor=\"fullName\">Full Name</Label>\n              <Input\n                id=\"fullName\"\n                type=\"text\"\n                placeholder=\"Enter your full name\"\n                value={formData.fullName}\n                onChange={(e) => setFormData(prev => ({ ...prev, fullName: e.target.value }))}\n                required\n                data-testid=\"input-fullname\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                value={formData.email}\n                onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                required\n                data-testid=\"input-email\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"Create a password\"\n                value={formData.password}\n                onChange={(e) => setFormData(prev => ({ ...prev, password: e.target.value }))}\n                required\n                data-testid=\"input-password\"\n              />\n            </div>\n            \n            <div className=\"flex items-start space-x-2\">\n              <Checkbox \n                id=\"terms\"\n                checked={formData.agreeToTerms}\n                onCheckedChange={(checked) => setFormData(prev => ({ ...prev, agreeToTerms: !!checked }))}\n              />\n              <Label htmlFor=\"terms\" className=\"text-sm leading-5\">\n                I agree to the{' '}\n                <Button variant=\"link\" className=\"p-0 h-auto text-primary text-sm\">\n                  Terms of Service\n                </Button>\n                {' '}and{' '}\n                <Button variant=\"link\" className=\"p-0 h-auto text-primary text-sm\">\n                  Privacy Policy\n                </Button>\n              </Label>\n            </div>\n            \n            <Button \n              type=\"submit\" \n              size=\"lg\"\n              variant=\"default\"\n              className=\"w-full h-12 bg-primary text-primary-foreground hover:bg-primary/90 shadow-md\"\n              disabled={loading}\n              data-testid=\"button-create-account\"\n            >\n              {loading ? \"Creating Account...\" : \"Create Account\"}\n            </Button>\n            \n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <div className=\"w-full border-t border-border\"></div>\n              </div>\n              <div className=\"relative flex justify-center text-sm\">\n                <span className=\"px-2 bg-background text-muted-foreground\">Or continue with</span>\n              </div>\n            </div>\n            \n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              size=\"lg\"\n              className=\"w-full h-12 border-2 hover:bg-muted/50\"\n              onClick={handleGoogleSignUp}\n              data-testid=\"button-google-signup\"\n            >\n              <svg className=\"mr-2 h-4 w-4\" viewBox=\"0 0 24 24\">\n                <path fill=\"currentColor\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                <path fill=\"currentColor\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                <path fill=\"currentColor\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                <path fill=\"currentColor\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n              </svg>\n              Sign up with Google\n            </Button>\n          </form>\n          \n          <div className=\"text-center mt-6\">\n            <p className=\"text-muted-foreground\">\n              Already have an account?{' '}\n              <Button \n                variant=\"link\" \n                className=\"p-0\"\n                onClick={() => setLocation('/login')}\n                data-testid=\"link-signin\"\n              >\n                Sign in\n              </Button>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7447},"client/src/components/auth/auth-guard.tsx":{"content":"import { useAuth } from '@/hooks/use-auth';\nimport { useLocation } from 'wouter';\nimport { useEffect } from 'react';\n\ninterface AuthGuardProps {\n  children: React.ReactNode;\n}\n\nexport default function AuthGuard({ children }: AuthGuardProps) {\n  const { user, loading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!loading && !user) {\n      setLocation('/login');\n    }\n  }, [user, loading, setLocation]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  return <>{children}</>;\n}\n","size_bytes":729},"client/src/components/dashboard/appointments-list.tsx":{"content":"import { useQuery, useMutation } from '@tanstack/react-query';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Check, X, Calendar, Mail, Filter, Download } from 'lucide-react';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function AppointmentsList() {\n  const { toast } = useToast();\n  const { data: appointments = [], isLoading } = useQuery<any[]>({\n    queryKey: ['/api/appointments'],\n  });\n\n  const updateAppointmentMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      const response = await apiRequest('PATCH', `/api/appointments/${id}`, { status });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/appointments'] });\n      toast({\n        title: \"Success\",\n        description: \"Appointment status updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update appointment status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleStatusUpdate = (id: string, status: string) => {\n    updateAppointmentMutation.mutate({ id, status });\n  };\n\n  const handleEmail = (email: string) => {\n    window.open(`mailto:${email}`, '_blank');\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <div className=\"flex items-center justify-between mb-8\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\">Appointments</h2>\n          <p className=\"text-muted-foreground\">Manage your upcoming and past appointments</p>\n        </div>\n        <div className=\"flex space-x-3\">\n          <Button variant=\"outline\" data-testid=\"button-filter\">\n            <Filter className=\"h-4 w-4 mr-2\" />\n            Filter\n          </Button>\n          <Button variant=\"outline\" data-testid=\"button-export\">\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export\n          </Button>\n        </div>\n      </div>\n\n      {appointments.length === 0 ? (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <div className=\"text-6xl text-muted-foreground mb-4\">üìÖ</div>\n            <h3 className=\"text-xl font-semibold text-foreground mb-2\">No appointments yet</h3>\n            <p className=\"text-muted-foreground mb-6\">\n              Once people start booking appointments through your pages, they'll appear here.\n            </p>\n            <Button \n              variant=\"default\"\n              className=\"bg-primary text-primary-foreground hover:bg-primary/90 shadow-md\" \n              data-testid=\"button-create-page-from-appointments\"\n            >\n              Create Your First Booking Page\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <Card>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-muted/50\">\n                <tr>\n                  <th className=\"text-left py-4 px-6 text-sm font-medium text-muted-foreground\">Customer</th>\n                  <th className=\"text-left py-4 px-6 text-sm font-medium text-muted-foreground\">Service</th>\n                  <th className=\"text-left py-4 px-6 text-sm font-medium text-muted-foreground\">Date & Time</th>\n                  <th className=\"text-left py-4 px-6 text-sm font-medium text-muted-foreground\">Status</th>\n                  <th className=\"text-left py-4 px-6 text-sm font-medium text-muted-foreground\">Actions</th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-border\">\n                {appointments.map((appointment: any) => (\n                  <tr key={appointment.id}>\n                    <td className=\"py-4 px-6\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                          <span className=\"text-sm font-medium text-primary\">\n                            {appointment.customerName?.charAt(0)}\n                          </span>\n                        </div>\n                        <div>\n                          <p className=\"font-medium text-foreground\" data-testid={`customer-name-${appointment.id}`}>\n                            {appointment.customerName}\n                          </p>\n                          <p className=\"text-sm text-muted-foreground\" data-testid={`customer-email-${appointment.id}`}>\n                            {appointment.customerEmail}\n                          </p>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"py-4 px-6\">\n                      <span className=\"text-foreground\" data-testid={`service-name-${appointment.id}`}>\n                        {appointment.serviceName || 'Service'}\n                      </span>\n                    </td>\n                    <td className=\"py-4 px-6\">\n                      <div>\n                        <p className=\"text-foreground\">{appointment.date}</p>\n                        <p className=\"text-sm text-muted-foreground\">{appointment.time}</p>\n                      </div>\n                    </td>\n                    <td className=\"py-4 px-6\">\n                      <Badge \n                        variant={appointment.status === 'pending' ? 'secondary' : 'default'}\n                        className={\n                          appointment.status === 'pending' ? 'bg-orange-100 text-orange-800' :\n                          appointment.status === 'accepted' ? 'bg-green-100 text-green-800' :\n                          appointment.status === 'declined' ? 'bg-red-100 text-red-800' :\n                          'bg-blue-100 text-blue-800'\n                        }\n                        data-testid={`status-${appointment.id}`}\n                      >\n                        {appointment.status?.charAt(0).toUpperCase() + appointment.status?.slice(1)}\n                      </Badge>\n                    </td>\n                    <td className=\"py-4 px-6\">\n                      <div className=\"flex space-x-2\">\n                        {appointment.status === 'pending' && (\n                          <>\n                            <Button \n                              size=\"sm\" \n                              variant=\"ghost\" \n                              className=\"text-green-600 hover:text-green-700 p-1\"\n                              data-testid={`button-accept-${appointment.id}`}\n                              onClick={() => handleStatusUpdate(appointment.id, 'accepted')}\n                              disabled={updateAppointmentMutation.isPending}\n                            >\n                              <Check className=\"h-4 w-4\" />\n                            </Button>\n                            <Button \n                              size=\"sm\" \n                              variant=\"ghost\" \n                              className=\"text-red-600 hover:text-red-700 p-1\"\n                              data-testid={`button-decline-${appointment.id}`}\n                              onClick={() => handleStatusUpdate(appointment.id, 'declined')}\n                              disabled={updateAppointmentMutation.isPending}\n                            >\n                              <X className=\"h-4 w-4\" />\n                            </Button>\n                          </>\n                        )}\n                        <Button \n                          size=\"sm\" \n                          variant=\"ghost\" \n                          className=\"text-blue-600 hover:text-blue-700 p-1\"\n                          data-testid={`button-reschedule-${appointment.id}`}\n                        >\n                          <Calendar className=\"h-4 w-4\" />\n                        </Button>\n                        {appointment.customerEmail && (\n                          <Button \n                            size=\"sm\" \n                            variant=\"ghost\" \n                            className=\"text-gray-600 hover:text-gray-700 p-1\"\n                            data-testid={`button-email-${appointment.id}`}\n                            onClick={() => handleEmail(appointment.customerEmail)}\n                          >\n                            <Mail className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":8936},"client/src/components/dashboard/overview.tsx":{"content":"import { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { FileText, CalendarCheck, Clock, DollarSign, Plus, Calendar, BarChart3, Edit, Check } from 'lucide-react';\nimport { useLocation } from 'wouter';\n\ninterface OverviewProps {\n  onSectionChange?: (section: string) => void;\n}\n\nexport default function Overview({ onSectionChange }: OverviewProps) {\n  const [, setLocation] = useLocation();\n\n  const stats = [\n    {\n      title: \"Booking Pages\",\n      value: \"0\",\n      icon: FileText,\n      color: \"bg-primary/10 text-primary\"\n    },\n    {\n      title: \"Total Bookings\",\n      value: \"0\",\n      icon: CalendarCheck,\n      color: \"bg-green-100 text-green-600\"\n    },\n    {\n      title: \"Pending\",\n      value: \"0\",\n      icon: Clock,\n      color: \"bg-orange-100 text-orange-600\"\n    }\n  ];\n\n  const activities = [\n    {\n      type: 'info',\n      title: \"Welcome to BookingGen!\",\n      description: \"Create your first booking page to get started\",\n      time: \"Just now\",\n      icon: Check,\n      iconBg: \"bg-blue-100 text-blue-600\"\n    }\n  ];\n\n  const quickActions = [\n    {\n      title: \"Create New Page\",\n      description: \"Set up a booking page for your services\",\n      icon: Plus,\n      iconBg: \"bg-primary/10 text-primary\",\n      action: () => {\n        setLocation('/create-page');\n      }\n    },\n    {\n      title: \"View Calendar\",\n      description: \"Check your upcoming appointments\",\n      icon: Calendar,\n      iconBg: \"bg-green-100 text-green-600\",\n      action: () => {\n        onSectionChange?.('appointments');\n      }\n    },\n    {\n      title: \"View Analytics\",\n      description: \"Track your booking performance\",\n      icon: BarChart3,\n      iconBg: \"bg-purple-100 text-purple-600\",\n      action: () => {\n        onSectionChange?.('analytics');\n      }\n    }\n  ];\n\n  return (\n    <div>\n      {/* Stats Grid */}\n      <div className=\"grid lg:grid-cols-3 gap-6 mb-8\">\n        {stats.map((stat, index) => (\n          <Card key={index} className=\"stat-card border-0\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${stat.color}`}>\n                  <stat.icon className=\"h-6 w-6\" />\n                </div>\n                <span className=\"text-2xl font-bold text-foreground\" data-testid={`stat-${stat.title.toLowerCase().replace(' ', '-')}`}>\n                  {stat.value}\n                </span>\n              </div>\n              <h3 className=\"text-sm font-medium text-muted-foreground\">{stat.title}</h3>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <div className=\"grid lg:grid-cols-2 gap-8\">\n        {/* Recent Activity */}\n        <Card className=\"premium-card border-0\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-foreground mb-6\">Recent Activity</h3>\n            <div className=\"space-y-4\">\n              {activities.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"text-4xl text-muted-foreground mb-4\">üìã</div>\n                  <p className=\"text-muted-foreground\">No recent activity</p>\n                </div>\n              ) : (\n                activities.map((activity, index) => (\n                  <div key={index} className=\"flex items-center space-x-4\">\n                    <div className={`w-10 h-10 rounded-full flex items-center justify-center ${activity.iconBg}`}>\n                      <activity.icon className=\"h-5 w-5\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium text-foreground\">{activity.title}</p>\n                      <p className=\"text-xs text-muted-foreground\">{activity.description}</p>\n                      <p className=\"text-xs text-muted-foreground\">{activity.time}</p>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Quick Actions */}\n        <Card className=\"premium-card border-0\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-foreground mb-6\">Quick Actions</h3>\n            <div className=\"space-y-4\">\n              {quickActions.map((action, index) => (\n                <Button\n                  key={index}\n                  onClick={action.action}\n                  variant=\"ghost\"\n                  className=\"quick-action-button w-full flex items-center justify-between p-4 h-auto\"\n                  data-testid={`quick-action-${action.title.toLowerCase().replace(' ', '-')}`}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${action.iconBg}`}>\n                      <action.icon className=\"h-5 w-5\" />\n                    </div>\n                    <div className=\"text-left\">\n                      <span className=\"font-medium text-foreground block\">{action.title}</span>\n                      <span className=\"text-sm text-muted-foreground\">{action.description}</span>\n                    </div>\n                  </div>\n                  <div className=\"text-muted-foreground\">‚Üí</div>\n                </Button>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5512},"client/src/components/dashboard/pages-list.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { \n  AlertDialog, \n  AlertDialogAction, \n  AlertDialogCancel, \n  AlertDialogContent, \n  AlertDialogDescription, \n  AlertDialogFooter, \n  AlertDialogHeader, \n  AlertDialogTitle \n} from '@/components/ui/alert-dialog';\nimport CreatePageModal from '@/components/modals/create-page-modal';\nimport UpgradeModal from '@/components/modals/upgrade-modal';\nimport { Plus, ExternalLink, Edit, Eye, Trash2 } from 'lucide-react';\nimport { useLocation } from 'wouter';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/use-auth';\n\nexport default function PagesList() {\n  const [, setLocation] = useLocation();\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [showUpgradeModal, setShowUpgradeModal] = useState(false);\n  const [deletePageId, setDeletePageId] = useState<string | null>(null);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const { profile } = useAuth();\n\n  // Check if user has Pro membership and it hasn't expired\n  const now = new Date();\n  const membershipExpired = profile?.membershipExpires && new Date(profile.membershipExpires) <= now;\n  const isProUser = profile?.membershipStatus === 'pro' && !membershipExpired;\n\n  const { data: pages = [], isLoading } = useQuery<any[]>({\n    queryKey: ['/api/pages'],\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (pageId: string) => {\n      return apiRequest('DELETE', `/api/pages/${pageId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/pages'] });\n      toast({\n        title: \"Page deleted\",\n        description: \"Your booking page has been successfully deleted.\",\n      });\n      setDeletePageId(null);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Delete failed\",\n        description: \"Failed to delete the page. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDeletePage = (pageId: string) => {\n    setDeletePageId(pageId);\n  };\n\n  const confirmDelete = () => {\n    if (deletePageId) {\n      deleteMutation.mutate(deletePageId);\n    }\n  };\n\n  const handleCreatePage = () => {\n    if (isProUser) {\n      setShowCreateModal(true);\n    } else {\n      setShowUpgradeModal(true);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <div className=\"flex items-center justify-between mb-8\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\">Booking Pages</h2>\n          <p className=\"text-muted-foreground\">Create and manage your booking pages</p>\n        </div>\n        <Button \n          onClick={handleCreatePage}\n          variant=\"default\"\n          className=\"bg-primary text-primary-foreground hover:bg-primary/90 shadow-md\"\n          data-testid=\"button-create-page\"\n        >\n          <Plus className=\"h-5 w-5 mr-2\" />\n          Create Page\n        </Button>\n      </div>\n\n      {pages.length === 0 ? (\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          <Card className=\"border-2 border-dashed border-border\">\n            <CardContent className=\"p-6 flex flex-col items-center justify-center text-center h-80\">\n              <div className=\"w-16 h-16 bg-muted rounded-xl flex items-center justify-center mb-4\">\n                <Plus className=\"h-8 w-8 text-muted-foreground\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">Create Your First Page</h3>\n              <p className=\"text-muted-foreground text-sm mb-6\">\n                Set up a booking page for your services and start accepting appointments\n              </p>\n              <Button \n                onClick={handleCreatePage}\n                variant=\"default\"\n                className=\"bg-primary text-primary-foreground hover:bg-primary/90 shadow-md\"\n                data-testid=\"button-get-started\"\n              >\n                Get Started\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      ) : (\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {pages.map((page: any) => (\n            <Card key={page.id} className=\"overflow-hidden\">\n              <div className=\"h-48 bg-gradient-to-br from-primary/10 to-primary/20 flex items-center justify-center\">\n                {page.logoUrl ? (\n                  <img \n                    src={page.logoUrl} \n                    alt={`${page.title} logo`}\n                    className=\"w-20 h-20 rounded-lg object-cover\"\n                  />\n                ) : (\n                  <div className=\"w-20 h-20 bg-primary/20 rounded-lg flex items-center justify-center\">\n                    <span className=\"text-2xl font-bold text-primary\">\n                      {page.title?.charAt(0) || 'B'}\n                    </span>\n                  </div>\n                )}\n              </div>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <h3 className=\"text-lg font-semibold text-foreground\">{page.title}</h3>\n                  <div className=\"w-3 h-3 bg-green-500 rounded-full\" title=\"Active\"></div>\n                </div>\n                <p className=\"text-muted-foreground text-sm mb-4\">{page.tagline}</p>\n                <div className=\"flex items-center justify-between text-sm text-muted-foreground mb-4\">\n                  <span>bookinggen.com/{page.slug}</span>\n                  <span>0 bookings</span>\n                </div>\n                <div className=\"flex space-x-2\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    className=\"flex-1\"\n                    data-testid={`button-edit-${page.slug}`}\n                  >\n                    <Edit className=\"h-4 w-4 mr-1\" />\n                    Edit\n                  </Button>\n                  <Button \n                    size=\"sm\" \n                    variant=\"default\"\n                    className=\"flex-1 bg-primary text-primary-foreground hover:bg-primary/90 shadow-md\"\n                    onClick={() => setLocation(`/${page.slug}`)}\n                    data-testid={`button-view-${page.slug}`}\n                  >\n                    <Eye className=\"h-4 w-4 mr-1\" />\n                    View\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    className=\"text-red-600 border-red-200 hover:bg-red-50 hover:text-red-700\"\n                    onClick={() => handleDeletePage(page.id)}\n                    data-testid={`button-delete-${page.slug}`}\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n          \n          {/* Add new page card */}\n          <Card className=\"border-2 border-dashed border-border\">\n            <CardContent className=\"p-6 flex flex-col items-center justify-center text-center h-80\">\n              <div className=\"w-16 h-16 bg-muted rounded-xl flex items-center justify-center mb-4\">\n                <Plus className=\"h-8 w-8 text-muted-foreground\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">Create New Page</h3>\n              <p className=\"text-muted-foreground text-sm mb-6\">\n                Set up another booking page for different services\n              </p>\n              <Button \n                onClick={handleCreatePage}\n                variant=\"default\"\n                className=\"bg-primary text-primary-foreground hover:bg-primary/90 shadow-md\"\n                data-testid=\"button-create-another-page\"\n              >\n                Get Started\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      <CreatePageModal \n        open={showCreateModal} \n        onClose={() => setShowCreateModal(false)} \n      />\n\n      <UpgradeModal \n        isOpen={showUpgradeModal} \n        onClose={() => setShowUpgradeModal(false)} \n      />\n\n      <AlertDialog open={!!deletePageId} onOpenChange={() => setDeletePageId(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Booking Page</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete this booking page? This action cannot be undone and will permanently remove the page and all its associated data.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n            <AlertDialogAction \n              onClick={confirmDelete}\n              disabled={deleteMutation.isPending}\n              className=\"bg-red-600 hover:bg-red-700\"\n              data-testid=\"button-confirm-delete\"\n            >\n              {deleteMutation.isPending ? 'Deleting...' : 'Delete Page'}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":9574},"client/src/components/dashboard/sidebar.tsx":{"content":"import { useState } from 'react';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Button } from '@/components/ui/button';\nimport { CalendarDays, PieChart, FileText, CalendarCheck, BarChart3, Settings, Crown } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport UpgradeModal from '@/components/modals/upgrade-modal';\n\ninterface SidebarProps {\n  activeSection: string;\n  onSectionChange: (section: string) => void;\n}\n\nexport default function Sidebar({ activeSection, onSectionChange }: SidebarProps) {\n  const { profile } = useAuth();\n  const [isUpgradeModalOpen, setIsUpgradeModalOpen] = useState(false);\n\n  const navigation = [\n    { id: 'overview', label: 'Overview', icon: PieChart },\n    { id: 'pages', label: 'Booking Pages', icon: FileText },\n    { id: 'appointments', label: 'Appointments', icon: CalendarCheck, badge: 0 },\n    { id: 'analytics', label: 'Analytics', icon: BarChart3 },\n    { id: 'settings', label: 'Settings', icon: Settings },\n  ];\n\n  return (\n    <div className=\"w-64 bg-card border-r border-border h-screen\">\n      {/* Logo */}\n      <div className=\"p-6\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n            <CalendarDays className=\"h-6 w-6 text-primary-foreground\" />\n          </div>\n          <span className=\"text-xl font-bold text-foreground\">BookingGen</span>\n        </div>\n      </div>\n      \n      {/* Navigation */}\n      <nav className=\"px-6 space-y-2\">\n        {navigation.map((item) => (\n          <button\n            key={item.id}\n            onClick={() => onSectionChange(item.id)}\n            className={`w-full flex items-center px-4 py-3 rounded-xl transition-colors ${\n              activeSection === item.id\n                ? 'text-primary bg-primary/10'\n                : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n            }`}\n            data-testid={`nav-${item.id}`}\n          >\n            <item.icon className=\"h-5 w-5 mr-3\" />\n            {item.label}\n            {item.badge !== undefined && item.badge > 0 && (\n              <Badge variant=\"destructive\" className=\"ml-auto text-xs\">\n                {item.badge}\n              </Badge>\n            )}\n          </button>\n        ))}\n      </nav>\n      \n      {/* Upgrade Card */}\n      {profile?.membershipStatus !== 'pro' && (\n        <div className=\"p-6 mt-auto\">\n          <div className=\"bg-muted/50 rounded-xl p-4\">\n            <div className=\"flex items-center mb-2\">\n              <Crown className=\"h-5 w-5 text-primary mr-2\" />\n              <h4 className=\"font-semibold text-foreground\">Upgrade to Pro</h4>\n            </div>\n            <p className=\"text-sm text-muted-foreground mb-3\">\n              Unlock unlimited pages and advanced features\n            </p>\n            <Button \n              variant=\"default\"\n              className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90 shadow-md text-sm\" \n              data-testid=\"button-upgrade\"\n              onClick={() => setIsUpgradeModalOpen(true)}\n            >\n              Upgrade Now\n            </Button>\n          </div>\n        </div>\n      )}\n      \n      <UpgradeModal \n        isOpen={isUpgradeModalOpen} \n        onClose={() => setIsUpgradeModalOpen(false)} \n      />\n    </div>\n  );\n}\n","size_bytes":3346},"client/src/components/layout/footer.tsx":{"content":"import { CalendarDays } from 'lucide-react';\n\nexport default function Footer() {\n  const footerLinks = {\n    product: [\n      { name: 'Features', href: '#features' },\n      { name: 'Pricing', href: '/pricing' },\n      { name: 'How It Works', href: '#how-it-works' },\n    ],\n    support: [\n      { name: 'Legal & Support', href: '/legal' },\n      { name: 'Terms & Conditions', href: '/terms' },\n      { name: 'Privacy Policy', href: '/privacy' },\n      { name: 'Cancellation & Refunds', href: '/refunds' },\n      { name: 'Contact Us', href: '/contact' },\n    ],\n  };\n\n  const socialLinks = [\n    { name: 'Twitter', href: '#', icon: 'ùïè' },\n    { name: 'LinkedIn', href: '#', icon: 'in' },\n    { name: 'GitHub', href: '#', icon: '‚ö°' },\n  ];\n\n  return (\n    <footer className=\"bg-muted/50 border-t border-border py-16\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"grid md:grid-cols-4 gap-8 mb-8\">\n          {/* Brand */}\n          <div>\n            <div className=\"flex items-center space-x-3 mb-6\">\n              <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n                <CalendarDays className=\"h-6 w-6 text-primary-foreground\" />\n              </div>\n              <span className=\"text-xl font-bold text-foreground\">BookingGen</span>\n            </div>\n            <p className=\"text-muted-foreground mb-4\">\n              Create beautiful booking pages that convert visitors into customers.\n            </p>\n          </div>\n\n          {/* Product Links */}\n          <div>\n            <h4 className=\"font-semibold text-foreground mb-4\">Product</h4>\n            <ul className=\"space-y-3\">\n              {footerLinks.product.map((link) => (\n                <li key={link.name}>\n                  <a \n                    href={link.href} \n                    className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                    data-testid={`footer-link-${link.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    {link.name}\n                  </a>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          {/* Support Links */}\n          <div>\n            <h4 className=\"font-semibold text-foreground mb-4\">Support</h4>\n            <ul className=\"space-y-3\">\n              {footerLinks.support.map((link) => (\n                <li key={link.name}>\n                  <a \n                    href={link.href} \n                    className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                    data-testid={`footer-link-${link.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    {link.name}\n                  </a>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          {/* Social Links */}\n          <div>\n            <h4 className=\"font-semibold text-foreground mb-4\">Connect</h4>\n            <div className=\"flex space-x-4\">\n              {socialLinks.map((social) => (\n                <a\n                  key={social.name}\n                  href={social.href}\n                  className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center text-primary hover:bg-primary hover:text-primary-foreground transition-colors\"\n                  data-testid={`social-link-${social.name.toLowerCase()}`}\n                >\n                  <span className=\"text-sm font-bold\">{social.icon}</span>\n                </a>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Copyright */}\n        <div className=\"border-t border-border pt-8 text-center text-muted-foreground\">\n          <p>&copy; 2024 BookingGen. All rights reserved.</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":3768},"client/src/components/layout/header.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Button } from '@/components/ui/button';\nimport { CalendarDays, Menu, X } from 'lucide-react';\n\nexport default function Header() {\n  const [, setLocation] = useLocation();\n  const { user, logout } = useAuth();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  const navigation = [\n    { name: 'Features', href: '#features' },\n    { name: 'Tutorial', href: '/tutorial' },\n    { name: 'Pricing', href: '/pricing' },\n    { name: 'How it Works', href: '#how-it-works' },\n  ];\n\n  const scrollToSection = (href: string) => {\n    if (href.startsWith('#')) {\n      const element = document.querySelector(href);\n      if (element) {\n        element.scrollIntoView({ behavior: 'smooth' });\n      }\n    } else {\n      setLocation(href);\n    }\n    setMobileMenuOpen(false);\n  };\n\n  return (\n    <header className=\"border-b border-border bg-background/80 backdrop-blur-md sticky top-0 z-50\">\n      <div className=\"container mx-auto px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          {/* Logo */}\n          <div \n            className=\"flex items-center space-x-3 cursor-pointer\"\n            onClick={() => setLocation('/')}\n            data-testid=\"logo\"\n          >\n            <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n              <CalendarDays className=\"h-6 w-6 text-primary-foreground\" />\n            </div>\n            <span className=\"text-xl font-bold text-foreground\">BookingGen</span>\n          </div>\n\n          {/* Desktop Navigation */}\n          <nav className=\"hidden md:flex items-center space-x-8\">\n            {navigation.map((item) => (\n              <button\n                key={item.name}\n                onClick={() => scrollToSection(item.href)}\n                className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                data-testid={`nav-${item.name.toLowerCase().replace(' ', '-')}`}\n              >\n                {item.name}\n              </button>\n            ))}\n            \n            {user ? (\n              <div className=\"flex items-center space-x-4\">\n                <Button \n                  variant=\"ghost\"\n                  onClick={() => setLocation('/dashboard')}\n                  data-testid=\"nav-dashboard\"\n                >\n                  Dashboard\n                </Button>\n                <Button \n                  variant=\"ghost\"\n                  onClick={logout}\n                  data-testid=\"nav-logout\"\n                >\n                  Logout\n                </Button>\n              </div>\n            ) : (\n              <div className=\"flex items-center space-x-4\">\n                <Button \n                  variant=\"ghost\"\n                  onClick={() => setLocation('/login')}\n                  data-testid=\"nav-login\"\n                >\n                  Login\n                </Button>\n                <Button \n                  onClick={() => setLocation('/signup')}\n                  className=\"button-gradient\"\n                  data-testid=\"nav-signup\"\n                >\n                  Get Started\n                </Button>\n              </div>\n            )}\n          </nav>\n\n          {/* Mobile Menu Button */}\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"md:hidden\"\n            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n            data-testid=\"mobile-menu-button\"\n          >\n            {mobileMenuOpen ? (\n              <X className=\"h-6 w-6\" />\n            ) : (\n              <Menu className=\"h-6 w-6\" />\n            )}\n          </Button>\n        </div>\n\n        {/* Mobile Navigation */}\n        {mobileMenuOpen && (\n          <div className=\"md:hidden mt-4 pb-4 border-t border-border pt-4\">\n            <div className=\"flex flex-col space-y-4\">\n              {navigation.map((item) => (\n                <button\n                  key={item.name}\n                  onClick={() => scrollToSection(item.href)}\n                  className=\"text-left text-muted-foreground hover:text-foreground transition-colors\"\n                  data-testid={`mobile-nav-${item.name.toLowerCase().replace(' ', '-')}`}\n                >\n                  {item.name}\n                </button>\n              ))}\n              \n              {user ? (\n                <>\n                  <Button \n                    variant=\"ghost\"\n                    onClick={() => {\n                      setLocation('/dashboard');\n                      setMobileMenuOpen(false);\n                    }}\n                    className=\"justify-start\"\n                    data-testid=\"mobile-nav-dashboard\"\n                  >\n                    Dashboard\n                  </Button>\n                  <Button \n                    variant=\"ghost\"\n                    onClick={() => {\n                      logout();\n                      setMobileMenuOpen(false);\n                    }}\n                    className=\"justify-start\"\n                    data-testid=\"mobile-nav-logout\"\n                  >\n                    Logout\n                  </Button>\n                </>\n              ) : (\n                <>\n                  <Button \n                    variant=\"ghost\"\n                    onClick={() => {\n                      setLocation('/login');\n                      setMobileMenuOpen(false);\n                    }}\n                    className=\"justify-start\"\n                    data-testid=\"mobile-nav-login\"\n                  >\n                    Login\n                  </Button>\n                  <Button \n                    onClick={() => {\n                      setLocation('/signup');\n                      setMobileMenuOpen(false);\n                    }}\n                    className=\"button-gradient\"\n                    data-testid=\"mobile-nav-signup\"\n                  >\n                    Get Started\n                  </Button>\n                </>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </header>\n  );\n}\n","size_bytes":6127},"client/src/components/modals/booking-modal.tsx":{"content":"import { useState } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Info } from 'lucide-react';\n\ninterface BookingModalProps {\n  open: boolean;\n  onClose: () => void;\n  page: any;\n  services: any[];\n}\n\nexport default function BookingModal({ open, onClose, page, services }: BookingModalProps) {\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    customerName: '',\n    customerPhone: '',\n    customerEmail: '',\n    serviceId: '',\n    date: '',\n    time: '',\n    notes: ''\n  });\n\n  const createAppointmentMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest('POST', '/api/appointments', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Booking request submitted!\",\n        description: \"You will receive a confirmation email shortly.\",\n      });\n      onClose();\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error submitting booking\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      customerName: '',\n      customerPhone: '',\n      customerEmail: '',\n      serviceId: '',\n      date: '',\n      time: '',\n      notes: ''\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.customerName || !formData.customerPhone || !formData.serviceId || !formData.date || !formData.time) {\n      toast({\n        title: \"Missing required fields\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createAppointmentMutation.mutate({\n      pageId: page.id,\n      ownerId: page.ownerId,\n      serviceId: formData.serviceId,\n      customerName: formData.customerName,\n      customerPhone: formData.customerPhone,\n      customerEmail: formData.customerEmail,\n      date: formData.date,\n      time: formData.time,\n      notes: formData.notes\n    });\n  };\n\n  const timeSlots = [\n    '09:00', '10:00', '11:00', '12:00',\n    '13:00', '14:00', '15:00', '16:00', '17:00'\n  ];\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Book an Appointment</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"customerName\">Full Name *</Label>\n              <Input\n                id=\"customerName\"\n                placeholder=\"Enter your full name\"\n                value={formData.customerName}\n                onChange={(e) => setFormData(prev => ({ ...prev, customerName: e.target.value }))}\n                required\n                data-testid=\"input-customer-name\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"customerPhone\">Phone Number *</Label>\n              <Input\n                id=\"customerPhone\"\n                type=\"tel\"\n                placeholder=\"(123) 456-7890\"\n                value={formData.customerPhone}\n                onChange={(e) => setFormData(prev => ({ ...prev, customerPhone: e.target.value }))}\n                required\n                data-testid=\"input-customer-phone\"\n              />\n            </div>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"customerEmail\">Email (Optional)</Label>\n            <Input\n              id=\"customerEmail\"\n              type=\"email\"\n              placeholder=\"your@email.com\"\n              value={formData.customerEmail}\n              onChange={(e) => setFormData(prev => ({ ...prev, customerEmail: e.target.value }))}\n              data-testid=\"input-customer-email\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"service\">Service *</Label>\n            <Select value={formData.serviceId} onValueChange={(value) => setFormData(prev => ({ ...prev, serviceId: value }))}>\n              <SelectTrigger data-testid=\"select-service\">\n                <SelectValue placeholder=\"Choose a service\" />\n              </SelectTrigger>\n              <SelectContent>\n                {services.map((service) => (\n                  <SelectItem key={service.id} value={service.id}>\n                    {service.name} - ${service.price} ({service.durationMinutes} min)\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"date\">Preferred Date *</Label>\n              <Input\n                id=\"date\"\n                type=\"date\"\n                value={formData.date}\n                onChange={(e) => setFormData(prev => ({ ...prev, date: e.target.value }))}\n                min={new Date().toISOString().split('T')[0]}\n                required\n                data-testid=\"input-date\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"time\">Preferred Time *</Label>\n              <Select value={formData.time} onValueChange={(value) => setFormData(prev => ({ ...prev, time: value }))}>\n                <SelectTrigger data-testid=\"select-time\">\n                  <SelectValue placeholder=\"Select time slot\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {timeSlots.map((time) => (\n                    <SelectItem key={time} value={time}>\n                      {time}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"notes\">Additional Notes</Label>\n            <Textarea\n              id=\"notes\"\n              rows={4}\n              placeholder=\"Tell us about your goals, any health concerns, or special requests...\"\n              value={formData.notes}\n              onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n              className=\"resize-none\"\n              data-testid=\"textarea-notes\"\n            />\n          </div>\n          \n          <div className=\"bg-muted/50 rounded-xl p-4\">\n            <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n              <Info className=\"h-4 w-4\" />\n              <span>You will receive a confirmation email after submitting your booking request.</span>\n            </div>\n          </div>\n          \n          <div className=\"flex space-x-4 pt-6\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              className=\"flex-1\"\n              onClick={onClose}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              className=\"flex-1 button-gradient\"\n              disabled={createAppointmentMutation.isPending}\n              data-testid=\"button-submit-booking\"\n            >\n              {createAppointmentMutation.isPending ? 'Submitting...' : 'Submit Booking Request'}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7891},"client/src/components/modals/create-page-modal.tsx":{"content":"import { useState } from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { CloudUpload, Plus, X, Palette, Image } from 'lucide-react';\nimport { uploadFile } from '@/lib/supabase';\n\ninterface CreatePageModalProps {\n  open: boolean;\n  onClose: () => void;\n}\n\nexport default function CreatePageModal({ open, onClose }: CreatePageModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [formData, setFormData] = useState({\n    title: '',\n    slug: '',\n    tagline: '',\n    primaryColor: '#2563eb',\n    calendarLink: '',\n    logoUrl: '',\n    theme: 'Ocean Blue',\n    backgroundType: 'gradient',\n    backgroundValue: 'blue',\n    fontFamily: 'inter',\n    services: [{ name: '', description: '', durationMinutes: 60, price: '0' }]\n  });\n  \n  const [logoFile, setLogoFile] = useState<File | null>(null);\n  const [logoPreview, setLogoPreview] = useState<string>('');\n  const [uploadingLogo, setUploadingLogo] = useState(false);\n\n  // Beautiful color themes for booking pages\n  const colorThemes = [\n    { name: 'Ocean Blue', primary: '#2563eb', secondary: '#1e40af', accent: '#3b82f6', gradient: 'from-blue-500 to-blue-600' },\n    { name: 'Forest Green', primary: '#059669', secondary: '#047857', accent: '#10b981', gradient: 'from-emerald-500 to-emerald-600' },\n    { name: 'Sunset Orange', primary: '#ea580c', secondary: '#c2410c', accent: '#fb923c', gradient: 'from-orange-500 to-red-500' },\n    { name: 'Royal Purple', primary: '#7c3aed', secondary: '#6d28d9', accent: '#8b5cf6', gradient: 'from-violet-500 to-purple-600' },\n    { name: 'Rose Gold', primary: '#e11d48', secondary: '#be185d', accent: '#f43f5e', gradient: 'from-rose-500 to-pink-500' },\n    { name: 'Midnight', primary: '#1f2937', secondary: '#111827', accent: '#374151', gradient: 'from-gray-800 to-gray-900' }\n  ];\n\n  const backgroundOptions = [\n    { type: 'gradient', name: 'Blue Gradient', value: 'blue', class: 'bg-gradient-to-br from-blue-100 to-blue-200' },\n    { type: 'gradient', name: 'Green Gradient', value: 'green', class: 'bg-gradient-to-br from-emerald-100 to-emerald-200' },\n    { type: 'gradient', name: 'Purple Gradient', value: 'purple', class: 'bg-gradient-to-br from-violet-100 to-violet-200' },\n    { type: 'gradient', name: 'Rose Gradient', value: 'rose', class: 'bg-gradient-to-br from-rose-100 to-rose-200' },\n    { type: 'solid', name: 'Clean White', value: 'white', class: 'bg-white' },\n    { type: 'solid', name: 'Soft Gray', value: 'gray', class: 'bg-gray-50' }\n  ];\n\n  const fontOptions = [\n    { name: 'Inter (Modern)', value: 'inter', class: 'font-inter' },\n    { name: 'Playfair (Elegant)', value: 'playfair', class: 'font-playfair' },\n    { name: 'Roboto (Clean)', value: 'roboto', class: 'font-roboto' },\n    { name: 'Open Sans (Friendly)', value: 'opensans', class: 'font-opensans' }\n  ];\n\n  const createPageMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest('POST', '/api/pages', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/pages'] });\n      toast({\n        title: \"Page created!\",\n        description: \"Your booking page has been created successfully.\",\n      });\n      onClose();\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error creating page\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      title: '',\n      slug: '',\n      tagline: '',\n      primaryColor: '#2563eb',\n      calendarLink: '',\n      logoUrl: '',\n      theme: 'Ocean Blue',\n      backgroundType: 'gradient',\n      backgroundValue: 'blue',\n      fontFamily: 'inter',\n      services: [{ name: '', description: '', durationMinutes: 60, price: '0' }]\n    });\n    setLogoFile(null);\n    setLogoPreview('');\n  };\n\n  const selectColorTheme = (theme: any) => {\n    setFormData(prev => ({\n      ...prev,\n      primaryColor: theme.primary,\n      theme: theme.name\n    }));\n  };\n\n  const handleLogoUpload = async (file: File) => {\n    setUploadingLogo(true);\n    try {\n      // Create preview\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setLogoPreview(e.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n\n      // Upload to Supabase\n      const result = await uploadFile(file, 'logos');\n      \n      if (result.success && result.url) {\n        setFormData(prev => ({ ...prev, logoUrl: result.url || '' }));\n        setLogoFile(file);\n        toast({\n          title: \"Logo uploaded!\",\n          description: \"Your logo has been uploaded successfully.\",\n        });\n      } else {\n        toast({\n          title: \"Upload failed\",\n          description: result.error || \"Failed to upload logo. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Upload error\",\n        description: \"Something went wrong while uploading your logo.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploadingLogo(false);\n    }\n  };\n\n  const generateSlug = (title: string) => {\n    return title\n      .toLowerCase()\n      .trim()\n      .replace(/[^a-z0-9\\s-]/g, '')\n      .replace(/\\s+/g, '-')\n      .slice(0, 50);\n  };\n\n  const handleTitleChange = (value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      title: value,\n      slug: prev.slug === '' ? generateSlug(value) : prev.slug\n    }));\n  };\n\n  const addService = () => {\n    setFormData(prev => ({\n      ...prev,\n      services: [...prev.services, { name: '', description: '', durationMinutes: 60, price: '0' }]\n    }));\n  };\n\n  const removeService = (index: number) => {\n    if (formData.services.length > 1) {\n      setFormData(prev => ({\n        ...prev,\n        services: prev.services.filter((_, i) => i !== index)\n      }));\n    }\n  };\n\n  const updateService = (index: number, field: string, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      services: prev.services.map((service, i) =>\n        i === index ? { ...service, [field]: value } : service\n      )\n    }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.title || !formData.slug) {\n      toast({\n        title: \"Missing fields\",\n        description: \"Please fill in the title and slug.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const servicesWithNumbers = formData.services.map(service => ({\n      ...service,\n      price: parseFloat(service.price) || 0,\n      durationMinutes: parseInt(service.durationMinutes.toString()) || 60\n    }));\n\n    createPageMutation.mutate({\n      ...formData,\n      services: servicesWithNumbers\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Create Booking Page</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"title\">Page Title</Label>\n              <Input\n                id=\"title\"\n                placeholder=\"e.g., Personal Training\"\n                value={formData.title}\n                onChange={(e) => handleTitleChange(e.target.value)}\n                required\n                data-testid=\"input-page-title\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"slug\">URL Slug</Label>\n              <div className=\"flex\">\n                <span className=\"inline-flex items-center px-3 rounded-l-xl border border-r-0 border-border bg-muted text-muted-foreground text-sm\">\n                  bookinggen.com/\n                </span>\n                <Input\n                  id=\"slug\"\n                  placeholder=\"personal-training\"\n                  value={formData.slug}\n                  onChange={(e) => setFormData(prev => ({ ...prev, slug: generateSlug(e.target.value) }))}\n                  className=\"rounded-l-none\"\n                  required\n                  data-testid=\"input-page-slug\"\n                />\n              </div>\n            </div>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"tagline\">Tagline</Label>\n            <Input\n              id=\"tagline\"\n              placeholder=\"Transform your fitness journey with personalized training\"\n              value={formData.tagline}\n              onChange={(e) => setFormData(prev => ({ ...prev, tagline: e.target.value }))}\n              data-testid=\"input-tagline\"\n            />\n          </div>\n          \n          <div>\n            <Label>Logo Upload</Label>\n            <div \n              className=\"border-2 border-dashed border-border rounded-xl p-6 text-center cursor-pointer hover:border-primary/50 transition-colors\"\n              onClick={() => !uploadingLogo && document.getElementById('logo-upload-modal')?.click()}\n            >\n              {logoPreview ? (\n                <div className=\"space-y-4\">\n                  <img \n                    src={logoPreview} \n                    alt=\"Logo preview\" \n                    className=\"h-16 w-auto mx-auto rounded-lg border border-border\"\n                  />\n                  <p className=\"text-sm text-muted-foreground\">{logoFile?.name}</p>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      setLogoPreview('');\n                      setLogoFile(null);\n                      setFormData(prev => ({ ...prev, logoUrl: '' }));\n                    }}\n                  >\n                    Remove\n                  </Button>\n                </div>\n              ) : (\n                <>\n                  <CloudUpload className={`h-8 w-8 mx-auto mb-4 ${uploadingLogo ? 'animate-pulse text-primary' : 'text-muted-foreground'}`} />\n                  <p className=\"text-muted-foreground mb-2\">\n                    {uploadingLogo ? 'Uploading...' : 'Drop your logo here, or'} \n                    {!uploadingLogo && <span className=\"text-primary cursor-pointer\"> browse</span>}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">PNG, JPG up to 2MB</p>\n                </>\n              )}\n              <input\n                id=\"logo-upload-modal\"\n                type=\"file\"\n                accept=\"image/png,image/jpeg,image/jpg\"\n                className=\"hidden\"\n                disabled={uploadingLogo}\n                onChange={(e) => {\n                  const file = e.target.files?.[0];\n                  if (file) {\n                    if (file.size > 2 * 1024 * 1024) {\n                      toast({\n                        title: \"File too large\",\n                        description: \"Please select an image under 2MB\",\n                        variant: \"destructive\"\n                      });\n                      return;\n                    }\n                    handleLogoUpload(file);\n                  }\n                }}\n              />\n            </div>\n          </div>\n          \n          <div className=\"space-y-6\">\n            <div>\n              <Label className=\"flex items-center space-x-2\">\n                <Palette className=\"h-4 w-4\" />\n                <span>Color Theme</span>\n              </Label>\n              <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3 mt-3\">\n                {colorThemes.map((theme, index) => (\n                  <button\n                    key={index}\n                    type=\"button\"\n                    onClick={() => selectColorTheme(theme)}\n                    className={`p-3 rounded-xl border-2 transition-all ${\n                      formData.primaryColor === theme.primary \n                        ? 'border-primary ring-2 ring-primary/20' \n                        : 'border-border hover:border-primary/50'\n                    }`}\n                  >\n                    <div \n                      className={`h-8 w-full rounded-lg bg-gradient-to-r ${theme.gradient} mb-2`}\n                    />\n                    <p className=\"text-sm font-medium text-foreground\">{theme.name}</p>\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            <div>\n              <Label className=\"flex items-center space-x-2\">\n                <span className=\"text-sm font-medium\">Font Style</span>\n              </Label>\n              <div className=\"grid grid-cols-2 gap-3 mt-3\">\n                {fontOptions.map((font, index) => (\n                  <button\n                    key={index}\n                    type=\"button\"\n                    onClick={() => setFormData(prev => ({ ...prev, fontFamily: font.value }))}\n                    className={`p-3 rounded-xl border-2 transition-all ${\n                      formData.fontFamily === font.value \n                        ? 'border-primary ring-2 ring-primary/20' \n                        : 'border-border hover:border-primary/50'\n                    }`}\n                    data-testid={`button-font-${font.value}`}\n                  >\n                    <div className={`text-center ${font.class}`}>\n                      <p className=\"text-lg font-semibold mb-1\">Sample Text</p>\n                      <p className=\"text-xs text-muted-foreground\">{font.name}</p>\n                    </div>\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            <div>\n              <Label className=\"flex items-center space-x-2\">\n                <Image className=\"h-4 w-4\" />\n                <span>Background Style</span>\n              </Label>\n              <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3 mt-3\">\n                {backgroundOptions.map((bg, index) => (\n                  <button\n                    key={index}\n                    type=\"button\"\n                    onClick={() => setFormData(prev => ({ \n                      ...prev, \n                      backgroundType: bg.type, \n                      backgroundValue: bg.value \n                    }))}\n                    className={`p-3 rounded-xl border-2 transition-all ${\n                      formData.backgroundValue === bg.value \n                        ? 'border-primary ring-2 ring-primary/20' \n                        : 'border-border hover:border-primary/50'\n                    }`}\n                  >\n                    <div className={`h-8 w-full rounded-lg ${bg.class} mb-2 border border-border/20`} />\n                    <p className=\"text-sm font-medium text-foreground\">{bg.name}</p>\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"primaryColor\">Custom Primary Color</Label>\n              <div className=\"flex items-center space-x-4\">\n                <input\n                  type=\"color\"\n                  value={formData.primaryColor}\n                  onChange={(e) => setFormData(prev => ({ ...prev, primaryColor: e.target.value }))}\n                  className=\"w-12 h-12 border border-border rounded-lg\"\n                  data-testid=\"input-primary-color\"\n                />\n                <Input\n                  value={formData.primaryColor}\n                  onChange={(e) => setFormData(prev => ({ ...prev, primaryColor: e.target.value }))}\n                  className=\"flex-1\"\n                  data-testid=\"input-primary-color-hex\"\n                />\n              </div>\n            </div>\n          </div>\n          \n          <div>\n            <Label>Services</Label>\n            <div className=\"space-y-4\">\n              {formData.services.map((service, index) => (\n                <div key={index} className=\"grid md:grid-cols-4 gap-4 p-4 border border-border rounded-xl\">\n                  <Input\n                    placeholder=\"Service name\"\n                    value={service.name}\n                    onChange={(e) => updateService(index, 'name', e.target.value)}\n                    data-testid={`input-service-name-${index}`}\n                  />\n                  <Input\n                    type=\"number\"\n                    placeholder=\"Duration (min)\"\n                    value={service.durationMinutes}\n                    onChange={(e) => updateService(index, 'durationMinutes', parseInt(e.target.value))}\n                    data-testid={`input-service-duration-${index}`}\n                  />\n                  <div className=\"flex\">\n                    <span className=\"inline-flex items-center px-3 rounded-l-lg border border-r-0 border-border bg-muted text-muted-foreground text-sm\">\n                      $\n                    </span>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"Price\"\n                      value={service.price}\n                      onChange={(e) => updateService(index, 'price', e.target.value)}\n                      className=\"rounded-l-none\"\n                      data-testid={`input-service-price-${index}`}\n                    />\n                  </div>\n                  {formData.services.length > 1 && (\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"icon\"\n                      onClick={() => removeService(index)}\n                      data-testid={`button-remove-service-${index}`}\n                    >\n                      <X className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                </div>\n              ))}\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                className=\"w-full border-2 border-dashed\"\n                onClick={addService}\n                data-testid=\"button-add-service\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Another Service\n              </Button>\n            </div>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"calendarLink\">Calendar Integration</Label>\n            <Input\n              id=\"calendarLink\"\n              type=\"url\"\n              placeholder=\"Google Calendar, Calendly, or other calendar link\"\n              value={formData.calendarLink}\n              onChange={(e) => setFormData(prev => ({ ...prev, calendarLink: e.target.value }))}\n              data-testid=\"input-calendar-link\"\n            />\n          </div>\n          \n          <div className=\"flex space-x-4 pt-6\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              className=\"flex-1\"\n              onClick={onClose}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              variant=\"default\"\n              className=\"flex-1 bg-primary text-primary-foreground hover:bg-primary/90 shadow-md\"\n              disabled={createPageMutation.isPending}\n              data-testid=\"button-create-page\"\n            >\n              {createPageMutation.isPending ? 'Creating...' : 'Create Page'}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":19805},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/hooks/use-auth.tsx":{"content":"import { useState, useEffect, createContext, useContext } from 'react';\nimport { useLocation } from 'wouter';\nimport { supabase } from '@/lib/supabase';\nimport type { User as SupabaseUser, Session } from '@supabase/supabase-js';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface User {\n  id: string;\n  email: string;\n  fullName?: string;\n}\n\ninterface Profile {\n  id: string;\n  fullName?: string;\n  membershipStatus: string;\n  membershipPlan?: string;\n  membershipExpires?: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  profile: Profile | null;\n  session: Session | null;\n  login: (email: string, password: string, redirectTo?: string) => Promise<void>;\n  signup: (email: string, password: string, fullName: string) => Promise<void>;\n  signInWithGoogle: () => Promise<void>;\n  logout: () => Promise<void>;\n  loading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }): JSX.Element {\n  const [, setLocation] = useLocation();\n  const [user, setUser] = useState<User | null>(null);\n  const [profile, setProfile] = useState<Profile | null>(null);\n  const [session, setSession] = useState<Session | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [redirectAfterLogin, setRedirectAfterLogin] = useState<string | null>(null);\n\n  useEffect(() => {\n    // Get initial session\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setSession(session);\n      if (session?.user) {\n        // Store Supabase token for API calls\n        localStorage.setItem('token', session.access_token);\n        setUser({\n          id: session.user.id,\n          email: session.user.email || '',\n          fullName: session.user.user_metadata?.full_name\n        });\n        fetchProfile(session.user.id);\n      } else {\n        localStorage.removeItem('token');\n      }\n      setLoading(false);\n    });\n\n    // Listen for auth changes\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      setSession(session);\n      \n      if (session?.user) {\n        // Store Supabase token for API calls\n        localStorage.setItem('token', session.access_token);\n        setUser({\n          id: session.user.id,\n          email: session.user.email || '',\n          fullName: session.user.user_metadata?.full_name\n        });\n        fetchProfile(session.user.id);\n        \n        // Handle redirect after successful login\n        if (redirectAfterLogin && (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED')) {\n          setTimeout(() => {\n            setLocation(redirectAfterLogin);\n            setRedirectAfterLogin(null);\n          }, 100);\n        }\n      } else {\n        localStorage.removeItem('token');\n        setUser(null);\n        setProfile(null);\n      }\n      setLoading(false);\n    });\n\n    return () => subscription.unsubscribe();\n  }, [redirectAfterLogin, setLocation]);\n\n  const fetchProfile = async (userId: string) => {\n    try {\n      const response = await apiRequest('GET', '/api/profile');\n      const profileData = await response.json();\n      setProfile(profileData);\n      console.log('Profile fetched successfully:', profileData);\n    } catch (error) {\n      console.error('Failed to fetch profile:', error);\n      // Set a default profile to unblock the UI if server is completely down\n      setProfile({\n        id: userId,\n        fullName: session?.user?.user_metadata?.full_name || '',\n        membershipStatus: 'free',\n        membershipPlan: undefined,\n        membershipExpires: undefined\n      });\n    }\n  };\n\n  const login = async (email: string, password: string, redirectTo: string = '/dashboard') => {\n    setRedirectAfterLogin(redirectTo);\n    const { data, error } = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    });\n\n    if (error) {\n      setRedirectAfterLogin(null);\n      throw new Error(error.message);\n    }\n  };\n\n  const signup = async (email: string, password: string, fullName: string) => {\n    const { data, error } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: {\n          full_name: fullName,\n        },\n      },\n    });\n\n    if (error) {\n      throw new Error(error.message);\n    }\n\n    // Create profile in our database\n    if (data.user) {\n      try {\n        await apiRequest('POST', '/api/profile', {\n          userId: data.user.id,\n          fullName: fullName,\n        });\n      } catch (error) {\n        console.error('Failed to create profile:', error);\n      }\n    }\n  };\n\n  const signInWithGoogle = async () => {\n    const { data, error } = await supabase.auth.signInWithOAuth({\n      provider: 'google',\n      options: {\n        redirectTo: `${window.location.origin}/dashboard`,\n      },\n    });\n\n    if (error) {\n      throw new Error(error.message);\n    }\n  };\n\n  const logout = async () => {\n    const { error } = await supabase.auth.signOut();\n    if (error) {\n      throw new Error(error.message);\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ \n      user, \n      profile, \n      session, \n      login, \n      signup, \n      signInWithGoogle, \n      logout, \n      loading \n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}","size_bytes":5463},"replit.md":{"content":"# BookingGen - Beautiful Booking Pages Generator\n\n## Overview\n\nBookingGen is a modern SaaS platform that allows freelancers, consultants, and service providers to create stunning, professional booking pages with integrated payment processing and smart scheduling. The application enables users to build custom booking experiences with personalized branding, automated appointment management, and comprehensive analytics.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with Vite for fast development and optimized builds\n- **Styling**: Tailwind CSS with Shadcn UI components for consistent design system\n- **State Management**: React Query (TanStack Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Authentication**: Custom JWT-based authentication with local storage persistence\n\n### Backend Architecture\n- **Server Framework**: Express.js with serverless-compatible API routes\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Authentication**: JWT tokens with bcrypt password hashing\n- **File Structure**: Modular design with separate routes, storage, and schema layers\n- **Development Server**: Vite middleware integration for seamless development experience\n\n### Database Design\n- **Primary Database**: PostgreSQL with Neon serverless driver\n- **Schema Management**: Drizzle Kit for migrations and schema synchronization\n- **Core Tables**:\n  - `users`: Basic user authentication data\n  - `profiles`: Extended user information and membership status\n  - `pages`: Booking page configurations with customization options\n  - `services`: Service offerings linked to booking pages\n  - `appointments`: Booking records with customer information\n  - `paymentsDemo`: Payment transaction records\n\n### Authentication & Authorization\n- **Strategy**: JWT-based authentication with server-side verification\n- **Password Security**: bcrypt hashing with salt rounds\n- **Session Management**: Token-based sessions stored in localStorage\n- **Route Protection**: AuthGuard component for protected routes\n- **User Roles**: Profile-based membership levels (free/pro)\n\n### Payment Processing\n- **Provider**: Razorpay integration for secure payment handling\n- **Architecture**: Server-side order creation and verification\n- **Security**: API keys separated between client-safe and server-only\n- **Implementation**: Razorpay SDK integration with custom checkout flow\n\n### File Upload & Storage\n- **Provider**: Supabase Storage for logo and asset management\n- **Integration**: Direct upload capabilities for booking page customization\n- **Asset Management**: URL-based file references in database schema\n\n### UI/UX Design System\n- **Component Library**: Radix UI primitives with custom styling\n- **Design Tokens**: CSS custom properties for consistent theming\n- **Responsive Design**: Mobile-first approach with Tailwind breakpoints\n- **Accessibility**: ARIA-compliant components and keyboard navigation\n- **Dark Mode**: Built-in theme switching capabilities\n\n## External Dependencies\n\n### Database & Backend Services\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Supabase**: Authentication services and file storage infrastructure\n\n### Payment Processing\n- **Razorpay**: Payment gateway for order creation, processing, and verification\n- **Integration**: Live API keys for production payment handling\n\n### Development & Build Tools\n- **Vite**: Build tool and development server with HMR\n- **TypeScript**: Type safety across frontend and backend\n- **Drizzle Kit**: Database migration and schema management\n- **ESBuild**: Backend bundling for production deployment\n\n### UI & Component Libraries\n- **Radix UI**: Headless component primitives for accessibility\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide React**: Icon library for consistent iconography\n- **React Hook Form**: Form state management and validation\n\n### Deployment & Hosting\n- **Vercel**: Serverless deployment platform with API routes\n- **Environment Variables**: Secure configuration management for API keys\n- **Static Assets**: CDN-optimized delivery for frontend resources\n\n### Third-party Integrations\n- **Google Fonts**: Typography with Inter font family\n- **Calendar Integration**: External calendar linking capabilities\n- **Email Services**: Appointment confirmation and notification system (planned)","size_bytes":4482},"client/src/components/modals/upgrade-modal.tsx":{"content":"import { useState } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Check, Crown, CreditCard } from 'lucide-react';\nimport { useAuth } from '@/hooks/use-auth';\nimport { apiRequest } from '@/lib/queryClient';\nimport { initializeRazorpay, openRazorpayCheckout } from '@/lib/razorpay';\nimport { useToast } from '@/hooks/use-toast';\nimport { queryClient } from '@/lib/queryClient';\n\ninterface UpgradeModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function UpgradeModal({ isOpen, onClose }: UpgradeModalProps) {\n  const { user, profile } = useAuth();\n  const [isProcessing, setIsProcessing] = useState(false);\n  const { toast } = useToast();\n\n  const handleUpgrade = async () => {\n    if (!user) return;\n    \n    setIsProcessing(true);\n    try {\n      // Initialize Razorpay\n      const razorpayLoaded = await initializeRazorpay();\n      if (!razorpayLoaded) {\n        toast({\n          title: \"Error\",\n          description: \"Payment service is not available. Please try again later.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Create order\n      const response = await apiRequest('POST', '/api/payments/create-order', {\n        plan: 'pro',\n        amount: 10\n      });\n      const { orderId, amount, currency } = await response.json();\n\n      // Open Razorpay checkout\n      openRazorpayCheckout({\n        key: import.meta.env.VITE_RAZORPAY_KEY_ID || '',\n        amount,\n        currency,\n        name: 'BookingGen',\n        description: 'Pro Plan - Monthly',\n        order_id: orderId,\n        handler: async (paymentResponse: any) => {\n          try {\n            // Verify payment\n            await apiRequest('POST', '/api/payments/verify', {\n              razorpay_payment_id: paymentResponse.razorpay_payment_id,\n              razorpay_order_id: paymentResponse.razorpay_order_id,\n              razorpay_signature: paymentResponse.razorpay_signature,\n            });\n\n            // Invalidate profile query to refresh user data\n            queryClient.invalidateQueries({ queryKey: ['/api/profile'] });\n            \n            toast({\n              title: \"Success!\",\n              description: \"You've successfully upgraded to Pro! Your new features are now available.\",\n            });\n            \n            onClose();\n          } catch (error) {\n            console.error('Payment verification failed:', error);\n            toast({\n              title: \"Payment verification failed\",\n              description: \"Your payment was processed but verification failed. Please contact support.\",\n              variant: \"destructive\",\n            });\n          }\n        },\n        prefill: {\n          name: profile?.fullName || user.email,\n          email: user.email,\n        },\n        theme: {\n          color: '#2563eb',\n        },\n      });\n      \n    } catch (error) {\n      console.error('Payment error:', error);\n      toast({\n        title: \"Payment failed\",\n        description: \"Something went wrong while processing your payment. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-lg\" data-testid=\"modal-upgrade\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center text-xl\">\n            <Crown className=\"h-6 w-6 text-primary mr-2\" />\n            Upgrade to Pro\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {/* Plan Details */}\n          <div className=\"bg-gradient-to-r from-primary/10 to-blue-500/10 rounded-xl p-6 relative overflow-hidden\">\n            <Badge className=\"absolute top-4 right-4 bg-primary text-primary-foreground\">\n              Most Popular\n            </Badge>\n            <div className=\"flex items-center mb-4\">\n              <Crown className=\"h-8 w-8 text-primary mr-3\" />\n              <div>\n                <h3 className=\"text-2xl font-bold text-foreground\">Pro</h3>\n                <p className=\"text-muted-foreground\">All features included</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-baseline mb-6\">\n              <span className=\"text-4xl font-bold text-foreground\">$10</span>\n              <span className=\"text-muted-foreground ml-2\">/month</span>\n            </div>\n            \n            <div className=\"grid grid-cols-1 gap-3\">\n              {[\n                \"Unlimited booking pages\",\n                \"Custom branding\",\n                \"Payment processing\",\n                \"Analytics dashboard\",\n                \"Priority support\",\n                \"Full customization\",\n                \"No usage limits\"\n              ].map((feature) => (\n                <div key={feature} className=\"flex items-center\">\n                  <Check className=\"h-4 w-4 text-primary mr-3 flex-shrink-0\" />\n                  <span className=\"text-sm text-foreground\">{feature}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Current Plan Info */}\n          <div className=\"bg-muted/50 rounded-lg p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium text-foreground\">\n                  Current Plan: {profile?.membershipStatus === 'pro' ? 'Pro' : 'Free Trial'}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">\n                  {profile?.membershipStatus === 'pro' ? 'All features included' : 'Upgrade required to create pages'}\n                </p>\n              </div>\n              <Badge variant={profile?.membershipStatus === 'pro' ? 'default' : 'outline'}>\n                {profile?.membershipStatus === 'pro' ? 'Pro' : 'Free Trial'}\n              </Badge>\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex space-x-3\">\n            <Button\n              variant=\"outline\"\n              onClick={onClose}\n              className=\"flex-1\"\n              data-testid=\"button-cancel-upgrade\"\n            >\n              Maybe Later\n            </Button>\n            <Button\n              type=\"button\"\n              size=\"lg\"\n              variant=\"default\"\n              onClick={handleUpgrade}\n              disabled={isProcessing}\n              className=\"flex-1 h-12 button-gradient\"\n              data-testid=\"button-confirm-upgrade\"\n            >\n              {isProcessing ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  Processing...\n                </>\n              ) : (\n                <>\n                  <CreditCard className=\"h-4 w-4 mr-2\" />\n                  Upgrade Now\n                </>\n              )}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7105},"client/src/pages/tutorial.tsx":{"content":"import Header from '@/components/layout/header';\nimport Footer from '@/components/layout/footer';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { useLocation } from 'wouter';\nimport { \n  Play, \n  ArrowRight, \n  Clock, \n  Users, \n  CreditCard, \n  CheckCircle,\n  PlayCircle,\n  Monitor,\n  Smartphone\n} from 'lucide-react';\n\nexport default function Tutorial() {\n  const [, setLocation] = useLocation();\n\n  const steps = [\n    {\n      id: 1,\n      title: \"Create Your Booking Page\",\n      description: \"Set up your professional booking page in minutes\",\n      duration: \"2 min\",\n      details: [\n        \"Choose your page name and URL\",\n        \"Add your services and pricing\", \n        \"Customize your branding and colors\",\n        \"Set your availability hours\"\n      ]\n    },\n    {\n      id: 2,\n      title: \"Configure Your Services\",\n      description: \"Define what you offer and how long each service takes\",\n      duration: \"3 min\", \n      details: [\n        \"Add service names and descriptions\",\n        \"Set duration for each service\",\n        \"Configure pricing (optional)\",\n        \"Upload service images\"\n      ]\n    },\n    {\n      id: 3,\n      title: \"Share Your Booking Link\",\n      description: \"Make it easy for clients to find and book with you\",\n      duration: \"1 min\",\n      details: [\n        \"Copy your unique booking URL\",\n        \"Add to your website or social media\",\n        \"Share via email or messaging\",\n        \"Embed on your existing website\"\n      ]\n    },\n    {\n      id: 4,\n      title: \"Manage Your Bookings\",\n      description: \"Track appointments and communicate with clients\",\n      duration: \"Ongoing\",\n      details: [\n        \"View all bookings in your dashboard\",\n        \"Accept or decline appointments\",\n        \"Send messages to clients\",\n        \"Track your revenue and analytics\"\n      ]\n    }\n  ];\n\n  const benefits = [\n    {\n      icon: Clock,\n      title: \"Save Time\",\n      description: \"Automate your booking process and reduce back-and-forth communication\"\n    },\n    {\n      icon: Users,\n      title: \"Better Experience\", \n      description: \"Provide clients with a professional, easy-to-use booking experience\"\n    },\n    {\n      icon: CreditCard,\n      title: \"Secure Payments\",\n      description: \"Accept payments online with built-in payment processing\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        {/* Hero Section */}\n        <div className=\"text-center max-w-3xl mx-auto mb-16\">\n          <Badge className=\"mb-4\" data-testid=\"badge-tutorial\">\n            Tutorial\n          </Badge>\n          <h1 className=\"text-4xl md:text-5xl font-bold mb-6 text-foreground\" data-testid=\"text-tutorial-title\">\n            How BookingGen Works\n          </h1>\n          <p className=\"text-xl text-muted-foreground mb-8\" data-testid=\"text-tutorial-subtitle\">\n            Learn how to create your professional booking page and start accepting appointments in under 10 minutes.\n          </p>\n          \n          {/* Video placeholder - user will provide video later */}\n          <Card className=\"max-w-2xl mx-auto mb-8\">\n            <CardContent className=\"p-8\">\n              <div className=\"aspect-video bg-muted rounded-lg flex items-center justify-center mb-4\" data-testid=\"video-placeholder\">\n                <div className=\"text-center\">\n                  <PlayCircle className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">Demo Video</h3>\n                  <p className=\"text-muted-foreground\">Complete walkthrough coming soon</p>\n                </div>\n              </div>\n              <div className=\"flex items-center justify-center space-x-4 text-sm text-muted-foreground\">\n                <div className=\"flex items-center\">\n                  <Clock className=\"h-4 w-4 mr-1\" />\n                  8 minutes\n                </div>\n                <div className=\"flex items-center\">\n                  <Monitor className=\"h-4 w-4 mr-1\" />\n                  Full demo\n                </div>\n                <div className=\"flex items-center\">\n                  <Smartphone className=\"h-4 w-4 mr-1\" />\n                  Mobile-friendly\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Step by step process */}\n        <div className=\"mb-16\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold mb-4 text-foreground\" data-testid=\"text-process-title\">\n              Step-by-Step Process\n            </h2>\n            <p className=\"text-lg text-muted-foreground\" data-testid=\"text-process-subtitle\">\n              Follow these simple steps to get your booking system up and running\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 gap-8 max-w-4xl mx-auto\">\n            {steps.map((step, index) => (\n              <Card key={step.id} className=\"relative\" data-testid={`card-step-${step.id}`}>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <Badge variant=\"outline\" className=\"w-8 h-8 rounded-full flex items-center justify-center p-0\">\n                      {step.id}\n                    </Badge>\n                    <span className=\"text-sm text-muted-foreground flex items-center\">\n                      <Clock className=\"h-4 w-4 mr-1\" />\n                      {step.duration}\n                    </span>\n                  </div>\n                  <CardTitle className=\"text-xl\" data-testid={`text-step-title-${step.id}`}>\n                    {step.title}\n                  </CardTitle>\n                  <CardDescription data-testid={`text-step-description-${step.id}`}>\n                    {step.description}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-2\">\n                    {step.details.map((detail, detailIndex) => (\n                      <li key={detailIndex} className=\"flex items-start\" data-testid={`text-step-detail-${step.id}-${detailIndex}`}>\n                        <CheckCircle className=\"h-4 w-4 text-primary mr-2 mt-0.5 flex-shrink-0\" />\n                        <span className=\"text-sm text-foreground\">{detail}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </CardContent>\n                \n                {/* Connection line for larger screens */}\n                {index < steps.length - 1 && (\n                  <div className=\"hidden md:block absolute top-8 -right-4 w-8 h-0.5 bg-border z-10\"></div>\n                )}\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* Benefits Section */}\n        <div className=\"mb-16\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold mb-4 text-foreground\" data-testid=\"text-benefits-title\">\n              Why Choose BookingGen?\n            </h2>\n            <p className=\"text-lg text-muted-foreground\" data-testid=\"text-benefits-subtitle\">\n              See the benefits you'll get from using our booking platform\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-3 gap-8 max-w-4xl mx-auto\">\n            {benefits.map((benefit, index) => (\n              <Card key={index} className=\"text-center\" data-testid={`card-benefit-${index}`}>\n                <CardContent className=\"pt-6\">\n                  <benefit.icon className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\" data-testid={`text-benefit-title-${index}`}>\n                    {benefit.title}\n                  </h3>\n                  <p className=\"text-muted-foreground\" data-testid={`text-benefit-description-${index}`}>\n                    {benefit.description}\n                  </p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* Screenshots placeholder */}\n        <div className=\"mb-16\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold mb-4 text-foreground\" data-testid=\"text-screenshots-title\">\n              See It In Action\n            </h2>\n            <p className=\"text-lg text-muted-foreground\" data-testid=\"text-screenshots-subtitle\">\n              Screenshots of the actual booking process\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 gap-8 max-w-4xl mx-auto\">\n            <Card data-testid=\"card-screenshot-1\">\n              <CardContent className=\"p-6\">\n                <div className=\"aspect-video bg-muted rounded-lg flex items-center justify-center mb-4\">\n                  <div className=\"text-center\">\n                    <Monitor className=\"h-12 w-12 text-muted-foreground mx-auto mb-2\" />\n                    <p className=\"text-muted-foreground\">Dashboard Screenshot</p>\n                  </div>\n                </div>\n                <h3 className=\"font-semibold mb-2\">Your Dashboard</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Manage all your bookings from one clean, organized dashboard\n                </p>\n              </CardContent>\n            </Card>\n            \n            <Card data-testid=\"card-screenshot-2\">\n              <CardContent className=\"p-6\">\n                <div className=\"aspect-video bg-muted rounded-lg flex items-center justify-center mb-4\">\n                  <div className=\"text-center\">\n                    <Smartphone className=\"h-12 w-12 text-muted-foreground mx-auto mb-2\" />\n                    <p className=\"text-muted-foreground\">Booking Page Screenshot</p>\n                  </div>\n                </div>\n                <h3 className=\"font-semibold mb-2\">Client Booking Experience</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Beautiful, mobile-friendly booking pages your clients will love\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* CTA Section */}\n        <div className=\"text-center\">\n          <Card className=\"max-w-2xl mx-auto\">\n            <CardContent className=\"p-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-foreground\" data-testid=\"text-cta-title\">\n                Ready to Get Started?\n              </h2>\n              <p className=\"text-muted-foreground mb-6\" data-testid=\"text-cta-description\">\n                Join thousands of professionals who trust BookingGen to manage their appointments\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                <Button\n                  size=\"lg\"\n                  onClick={() => setLocation('/signup')}\n                  className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n                  data-testid=\"button-signup\"\n                >\n                  Start Free Trial\n                  <ArrowRight className=\"h-4 w-4 ml-2\" />\n                </Button>\n                <Button\n                  size=\"lg\"\n                  variant=\"outline\"\n                  onClick={() => setLocation('/pricing')}\n                  data-testid=\"button-pricing\"\n                >\n                  View Pricing\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":11717}},"version":1}